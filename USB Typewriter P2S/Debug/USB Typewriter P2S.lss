
USB Typewriter P2S.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001916  000019aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001916  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e1  0080014a  0080014a  000019f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005f4f  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a98  00000000  00000000  00007d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000c5ea  00000000  00000000  0000979b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c8c  00000000  00000000  00015d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00018c83  00000000  00000000  00016a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000043e9  00000000  00000000  0002f697  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e08  00000000  00000000  00033a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009025  00000000  00000000  00034888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c9 c0       	rjmp	.+402    	; 0x194 <__ctors_end>
       2:	00 00       	nop
       4:	e3 c0       	rjmp	.+454    	; 0x1cc <__bad_interrupt>
       6:	00 00       	nop
       8:	e1 c0       	rjmp	.+450    	; 0x1cc <__bad_interrupt>
       a:	00 00       	nop
       c:	df c0       	rjmp	.+446    	; 0x1cc <__bad_interrupt>
       e:	00 00       	nop
      10:	dd c0       	rjmp	.+442    	; 0x1cc <__bad_interrupt>
      12:	00 00       	nop
      14:	db c0       	rjmp	.+438    	; 0x1cc <__bad_interrupt>
      16:	00 00       	nop
      18:	d9 c0       	rjmp	.+434    	; 0x1cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d7 c0       	rjmp	.+430    	; 0x1cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	d5 c0       	rjmp	.+426    	; 0x1cc <__bad_interrupt>
      22:	00 00       	nop
      24:	d3 c0       	rjmp	.+422    	; 0x1cc <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_10>
      2c:	cf c0       	rjmp	.+414    	; 0x1cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	cd c0       	rjmp	.+410    	; 0x1cc <__bad_interrupt>
      32:	00 00       	nop
      34:	cb c0       	rjmp	.+406    	; 0x1cc <__bad_interrupt>
      36:	00 00       	nop
      38:	c9 c0       	rjmp	.+402    	; 0x1cc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c7 c0       	rjmp	.+398    	; 0x1cc <__bad_interrupt>
      3e:	00 00       	nop
      40:	c5 c0       	rjmp	.+394    	; 0x1cc <__bad_interrupt>
      42:	00 00       	nop
      44:	f9 c1       	rjmp	.+1010   	; 0x438 <__vector_17>
      46:	00 00       	nop
      48:	c1 c0       	rjmp	.+386    	; 0x1cc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bf c0       	rjmp	.+382    	; 0x1cc <__bad_interrupt>
      4e:	00 00       	nop
      50:	bd c0       	rjmp	.+378    	; 0x1cc <__bad_interrupt>
      52:	00 00       	nop
      54:	bb c0       	rjmp	.+374    	; 0x1cc <__bad_interrupt>
      56:	00 00       	nop
      58:	b9 c0       	rjmp	.+370    	; 0x1cc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b7 c0       	rjmp	.+366    	; 0x1cc <__bad_interrupt>
      5e:	00 00       	nop
      60:	b5 c0       	rjmp	.+362    	; 0x1cc <__bad_interrupt>
      62:	00 00       	nop
      64:	b3 c0       	rjmp	.+358    	; 0x1cc <__bad_interrupt>
      66:	00 00       	nop
      68:	b1 c0       	rjmp	.+354    	; 0x1cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	af c0       	rjmp	.+350    	; 0x1cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	ad c0       	rjmp	.+346    	; 0x1cc <__bad_interrupt>
      72:	00 00       	nop
      74:	ab c0       	rjmp	.+342    	; 0x1cc <__bad_interrupt>
      76:	00 00       	nop
      78:	a9 c0       	rjmp	.+338    	; 0x1cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a7 c0       	rjmp	.+334    	; 0x1cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	a5 c0       	rjmp	.+330    	; 0x1cc <__bad_interrupt>
      82:	00 00       	nop
      84:	a3 c0       	rjmp	.+326    	; 0x1cc <__bad_interrupt>
      86:	00 00       	nop
      88:	a1 c0       	rjmp	.+322    	; 0x1cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9f c0       	rjmp	.+318    	; 0x1cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	9d c0       	rjmp	.+314    	; 0x1cc <__bad_interrupt>
      92:	00 00       	nop
      94:	9b c0       	rjmp	.+310    	; 0x1cc <__bad_interrupt>
      96:	00 00       	nop
      98:	99 c0       	rjmp	.+306    	; 0x1cc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	97 c0       	rjmp	.+302    	; 0x1cc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	95 c0       	rjmp	.+298    	; 0x1cc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	93 c0       	rjmp	.+294    	; 0x1cc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	91 c0       	rjmp	.+290    	; 0x1cc <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	44 03 54 00 79 00 70 00 65 00 77 00 72 00 69 00     D.T.y.p.e.w.r.i.
      bc:	74 00 65 00 72 00 20 00 4b 00 65 00 79 00 62 00     t.e.r. .K.e.y.b.
      cc:	6f 00 61 00 72 00 64 00 20 00 56 00 65 00 72 00     o.a.r.d. .V.e.r.
      dc:	73 00 69 00 6f 00 6e 00 20 00 50 00 32 00 53 00     s.i.o.n. .P.2.S.
      ec:	2d 00 31 00 00 00                                   -.1...

000000f2 <ManufacturerString>:
      f2:	28 03 55 00 53 00 42 00 20 00 54 00 79 00 70 00     (.U.S.B. .T.y.p.
     102:	65 00 77 00 72 00 69 00 74 00 65 00 72 00 2c 00     e.w.r.i.t.e.r.,.
     112:	20 00 4c 00 4c 00 43 00 00 00                        .L.L.C...

0000011c <LanguageString>:
     11c:	04 03 09 04                                         ....

00000120 <ConfigurationDescriptor>:
     120:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     130:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     140:	00 05                                               ..

00000142 <DeviceDescriptor>:
     142:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
     152:	00 01                                               ..

00000154 <KeyboardReport>:
     154:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     164:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     174:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     184:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0 00     %.....)...u.....

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	da e0       	ldi	r29, 0x0A	; 10
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	e6 e1       	ldi	r30, 0x16	; 22
     1a8:	f9 e1       	ldi	r31, 0x19	; 25
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x10>
     1ac:	05 90       	lpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	aa 34       	cpi	r26, 0x4A	; 74
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0xc>

000001b6 <__do_clear_bss>:
     1b6:	22 e0       	ldi	r18, 0x02	; 2
     1b8:	aa e4       	ldi	r26, 0x4A	; 74
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	ab 32       	cpi	r26, 0x2B	; 43
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	8f d1       	rcall	.+798    	; 0x4e6 <main>
     1c8:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <_exit>

000001cc <__bad_interrupt>:
     1cc:	19 cf       	rjmp	.-462    	; 0x0 <__vectors>

000001ce <GetTeachKey>:
		GetTeachKey(learnChar);
		USBSend(KEY_ENTER,LOWER);
	}
}

void GetTeachKey(char teachkey){
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	d8 2f       	mov	r29, r24
	int keypressed = 0;
	while(keypressed == 0){ //keep getting a key until there is a key to get.
		keypressed = GetKey();
     1d4:	aa d2       	rcall	.+1364   	; 0x72a <GetKey>
     1d6:	c8 2f       	mov	r28, r24
     1d8:	28 2f       	mov	r18, r24
     1da:	30 e0       	ldi	r19, 0x00	; 0
	}
}

void GetTeachKey(char teachkey){
	int keypressed = 0;
	while(keypressed == 0){ //keep getting a key until there is a key to get.
     1dc:	21 15       	cp	r18, r1
     1de:	31 05       	cpc	r19, r1
     1e0:	c9 f3       	breq	.-14     	; 0x1d4 <GetTeachKey+0x6>
		keypressed = GetKey();
	}

	if (is_low(S2)){ //if Alt is being held down,
     1e2:	7e 99       	sbic	0x0f, 6	; 15
     1e4:	0d c0       	rjmp	.+26     	; 0x200 <GetTeachKey+0x32>
		FnKeyCodeLookUpTable[keypressed] = teachkey;
     1e6:	f9 01       	movw	r30, r18
     1e8:	e2 52       	subi	r30, 0x22	; 34
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	d0 83       	st	Z, r29
		//send "FN+number"
		USBSendString("FN");
     1ee:	80 e1       	ldi	r24, 0x10	; 16
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	de d1       	rcall	.+956    	; 0x5b0 <USBSendString>
		USBSend(KEY_EQ,UPPER); //send a + sign
     1f4:	62 e0       	ldi	r22, 0x02	; 2
     1f6:	8e e2       	ldi	r24, 0x2E	; 46
     1f8:	cd d1       	rcall	.+922    	; 0x594 <USBSend>
		USBSendNumber(keypressed);
     1fa:	8c 2f       	mov	r24, r28
     1fc:	01 d2       	rcall	.+1026   	; 0x600 <USBSendNumber>
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <GetTeachKey+0x3c>
	}
	else{
		KeyCodeLookUpTable[keypressed] = teachkey;
     200:	f9 01       	movw	r30, r18
     202:	ec 5a       	subi	r30, 0xAC	; 172
     204:	fe 4f       	sbci	r31, 0xFE	; 254
     206:	d0 83       	st	Z, r29
		USBSendNumber(keypressed);
     208:	fb d1       	rcall	.+1014   	; 0x600 <USBSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	2f ef       	ldi	r18, 0xFF	; 255
     20c:	84 e3       	ldi	r24, 0x34	; 52
     20e:	9c e0       	ldi	r25, 0x0C	; 12
     210:	21 50       	subi	r18, 0x01	; 1
     212:	80 40       	sbci	r24, 0x00	; 0
     214:	90 40       	sbci	r25, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <GetTeachKey+0x42>
     218:	00 c0       	rjmp	.+0      	; 0x21a <GetTeachKey+0x4c>
     21a:	00 00       	nop
	}
	
	Delay_MS(500);//implement 500 MS delay
}
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <Calibrate>:
#include "KeyCodes.h"
#include "Calibrate.h"
#include "globals.h"


void Calibrate(){
     222:	cf 93       	push	r28
	ClearKeyCodeTables();
     224:	e3 d2       	rcall	.+1478   	; 0x7ec <ClearKeyCodeTables>
	
	USBSendString("USB TYPEWRITER");
     226:	83 e1       	ldi	r24, 0x13	; 19
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	c2 d1       	rcall	.+900    	; 0x5b0 <USBSendString>
	USBSend(KEY_9,UPPER);
     22c:	62 e0       	ldi	r22, 0x02	; 2
     22e:	86 e2       	ldi	r24, 0x26	; 38
     230:	b1 d1       	rcall	.+866    	; 0x594 <USBSend>
	USBSend(KEY_T,UPPER);
     232:	62 e0       	ldi	r22, 0x02	; 2
     234:	87 e1       	ldi	r24, 0x17	; 23
     236:	ae d1       	rcall	.+860    	; 0x594 <USBSend>
	USBSend(KEY_M,UPPER);
     238:	62 e0       	ldi	r22, 0x02	; 2
     23a:	80 e1       	ldi	r24, 0x10	; 16
     23c:	ab d1       	rcall	.+854    	; 0x594 <USBSend>
	USBSend(KEY_0,UPPER);
     23e:	62 e0       	ldi	r22, 0x02	; 2
     240:	87 e2       	ldi	r24, 0x27	; 39
     242:	a8 d1       	rcall	.+848    	; 0x594 <USBSend>
	USBSend(KEY_ENTER,LOWER);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	a5 d1       	rcall	.+842    	; 0x594 <USBSend>
	USBSendString("VER");
     24a:	82 e2       	ldi	r24, 0x22	; 34
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	b0 d1       	rcall	.+864    	; 0x5b0 <USBSendString>
	USBSend(KEY_SPACE,UPPER);
     250:	62 e0       	ldi	r22, 0x02	; 2
     252:	8c e2       	ldi	r24, 0x2C	; 44
     254:	9f d1       	rcall	.+830    	; 0x594 <USBSend>
	USBSend(KEY_4,LOWER);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	81 e2       	ldi	r24, 0x21	; 33
     25a:	9c d1       	rcall	.+824    	; 0x594 <USBSend>
	USBSend(KEY_PERIOD,LOWER);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	87 e3       	ldi	r24, 0x37	; 55
     260:	99 d1       	rcall	.+818    	; 0x594 <USBSend>
	USBSend(KEY_2,LOWER);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	8f e1       	ldi	r24, 0x1F	; 31
     266:	96 d1       	rcall	.+812    	; 0x594 <USBSend>
	USBSend(KEY_ENTER,LOWER);
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	88 e2       	ldi	r24, 0x28	; 40
     26c:	93 d1       	rcall	.+806    	; 0x594 <USBSend>
	USBSendString("CALIBRATING");
     26e:	86 e2       	ldi	r24, 0x26	; 38
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	9e d1       	rcall	.+828    	; 0x5b0 <USBSendString>
	USBSend(KEY_PERIOD,LOWER);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	87 e3       	ldi	r24, 0x37	; 55
     278:	8d d1       	rcall	.+794    	; 0x594 <USBSend>
	USBSend(KEY_PERIOD,LOWER);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	87 e3       	ldi	r24, 0x37	; 55
     27e:	8a d1       	rcall	.+788    	; 0x594 <USBSend>
	USBSend(KEY_PERIOD,LOWER);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	87 e3       	ldi	r24, 0x37	; 55
     284:	87 d1       	rcall	.+782    	; 0x594 <USBSend>
	USBSend(KEY_ENTER,LOWER);
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	88 e2       	ldi	r24, 0x28	; 40
     28a:	84 d1       	rcall	.+776    	; 0x594 <USBSend>
	USBSendString("TYPE THE FOLLOWING KEYS");
     28c:	82 e3       	ldi	r24, 0x32	; 50
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	8f d1       	rcall	.+798    	; 0x5b0 <USBSendString>
	USBSend(KEY_PERIOD,LOWER);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	87 e3       	ldi	r24, 0x37	; 55
     296:	7e d1       	rcall	.+764    	; 0x594 <USBSend>
	USBSend(KEY_PERIOD,LOWER);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	87 e3       	ldi	r24, 0x37	; 55
     29c:	7b d1       	rcall	.+758    	; 0x594 <USBSend>
	USBSend(KEY_PERIOD,LOWER);
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	87 e3       	ldi	r24, 0x37	; 55
     2a2:	78 d1       	rcall	.+752    	; 0x594 <USBSend>
	USBSend(KEY_ENTER,LOWER);
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	88 e2       	ldi	r24, 0x28	; 40
     2a8:	75 d1       	rcall	.+746    	; 0x594 <USBSend>
	
	for (char learnChar = KEY_A; learnChar <= KEY_Z; learnChar ++){
     2aa:	c4 e0       	ldi	r28, 0x04	; 4
		USBSend(learnChar, UPPER);
     2ac:	62 e0       	ldi	r22, 0x02	; 2
     2ae:	8c 2f       	mov	r24, r28
     2b0:	71 d1       	rcall	.+738    	; 0x594 <USBSend>
		USBSend(KEY_SPACE,LOWER);// used to be a colon
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	8c e2       	ldi	r24, 0x2C	; 44
     2b6:	6e d1       	rcall	.+732    	; 0x594 <USBSend>
		GetTeachKey(learnChar);
     2b8:	8c 2f       	mov	r24, r28
     2ba:	89 df       	rcall	.-238    	; 0x1ce <GetTeachKey>
		USBSend(KEY_ENTER,LOWER);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	88 e2       	ldi	r24, 0x28	; 40
     2c0:	69 d1       	rcall	.+722    	; 0x594 <USBSend>
	USBSend(KEY_PERIOD,LOWER);
	USBSend(KEY_PERIOD,LOWER);
	USBSend(KEY_PERIOD,LOWER);
	USBSend(KEY_ENTER,LOWER);
	
	for (char learnChar = KEY_A; learnChar <= KEY_Z; learnChar ++){
     2c2:	cf 5f       	subi	r28, 0xFF	; 255
     2c4:	ce 31       	cpi	r28, 0x1E	; 30
     2c6:	91 f7       	brne	.-28     	; 0x2ac <Calibrate+0x8a>
		USBSend(learnChar, UPPER);
		USBSend(KEY_SPACE,LOWER);// used to be a colon
		GetTeachKey(learnChar);
		USBSend(KEY_ENTER,LOWER);
	}
}
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <Config_Interrupts>:


void Config_Interrupts(){

	
	bit_clr(PRR0,PRTIM1); // clear power-reduction bit for timer1
     2cc:	e4 e6       	ldi	r30, 0x64	; 100
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	87 7f       	andi	r24, 0xF7	; 247
     2d4:	80 83       	st	Z, r24
	TCCR1B = BIT(CTC1) | BIT(CS11); //set CTC (clear timer on compare equal mode) and set tmr prescaler to 8 -- page 125 of datasheet
     2d6:	8a e0       	ldi	r24, 0x0A	; 10
     2d8:	80 93 81 00 	sts	0x0081, r24
	
	OCR1AH = TIMER1_COMPARE_HIGH;//high register MUST be written before low register.  Datasheet says so!
     2dc:	83 ec       	ldi	r24, 0xC3	; 195
     2de:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = UINT8_C(TIMER1_COMPARE_LOW); //we only want the first 8 bits of the "low" variable.
     2e2:	80 e5       	ldi	r24, 0x50	; 80
     2e4:	80 93 88 00 	sts	0x0088, r24
	
	bit_set(TIMSK1,OCIE1A); //enable output compare interrupt for timer1
     2e8:	ef e6       	ldi	r30, 0x6F	; 111
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	82 60       	ori	r24, 0x02	; 2
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <Config_IO>:
#include "IO_Macros.h"
#include <avr/io.h>

void Config_IO(){
	
	configure_as_input(SD_DETECT);
     2f4:	27 98       	cbi	0x04, 7	; 4
	pullup_on(SD_DETECT);
     2f6:	2f 9a       	sbi	0x05, 7	; 5
	
	configure_as_input(REED_1);
     2f8:	56 98       	cbi	0x0a, 6	; 10
	pullup_on(REED_1);
     2fa:	5e 9a       	sbi	0x0b, 6	; 11
	
	configure_as_input(REED_2);
     2fc:	57 98       	cbi	0x0a, 7	; 10
	pullup_on(REED_2);	
     2fe:	5f 9a       	sbi	0x0b, 7	; 11

	configure_as_input(REED_3);
     300:	24 98       	cbi	0x04, 4	; 4
	pullup_on(REED_3);	
     302:	2c 9a       	sbi	0x05, 4	; 5
	
	configure_as_input(REED_4);
     304:	25 98       	cbi	0x04, 5	; 4
	pullup_on(REED_4);	
     306:	2d 9a       	sbi	0x05, 5	; 5

	configure_as_input(SD_MISO);
     308:	23 98       	cbi	0x04, 3	; 4
	pullup_on(SD_MISO);
     30a:	2b 9a       	sbi	0x05, 3	; 5
	
	configure_as_output(SD_MOSI);
     30c:	22 9a       	sbi	0x04, 2	; 4
	pullup_on(SD_MOSI);
     30e:	2a 9a       	sbi	0x05, 2	; 5
	
	configure_as_output(SENSE_CLK);
     310:	26 9a       	sbi	0x04, 6	; 4
	
	configure_as_input(SENSE_SER);
     312:	3e 98       	cbi	0x07, 6	; 7
	pullup_on(SENSE_SER);
     314:	46 9a       	sbi	0x08, 6	; 8
	
	configure_as_output(SD_CLK);
     316:	21 9a       	sbi	0x04, 1	; 4
	
	configure_as_input(PIO_5);
     318:	20 98       	cbi	0x04, 0	; 4
	pullup_on(PIO_5);
     31a:	28 9a       	sbi	0x05, 0	; 5
	
	configure_as_input(PIO_6);
     31c:	6e 98       	cbi	0x0d, 6	; 13
	pullup_on(PIO_6);
     31e:	76 9a       	sbi	0x0e, 6	; 14
	
	set_low(DUMMY_LOAD);
     320:	5d 98       	cbi	0x0b, 5	; 11
	configure_as_output(DUMMY_LOAD);
     322:	55 9a       	sbi	0x0a, 5	; 10
	
	configure_as_input(POK);
     324:	54 98       	cbi	0x0a, 4	; 10
	pullup_on(POK);
     326:	5c 9a       	sbi	0x0b, 4	; 11
	
	set_high(TX);
     328:	5b 9a       	sbi	0x0b, 3	; 11
	configure_as_output(TX);
     32a:	53 9a       	sbi	0x0a, 3	; 10
	
	configure_as_input(RX);
     32c:	52 98       	cbi	0x0a, 2	; 10
	pullup_on(RX);
     32e:	5a 9a       	sbi	0x0b, 2	; 11
	
	set_high(SD_CHIP_SELECT);
     330:	59 9a       	sbi	0x0b, 1	; 11
	configure_as_output(SD_CHIP_SELECT);
     332:	51 9a       	sbi	0x0a, 1	; 10
	
	set_high(SD_POWER);
     334:	58 9a       	sbi	0x0b, 0	; 11
	configure_as_output(SD_POWER);
     336:	50 9a       	sbi	0x0a, 0	; 10
	
	set_high(SENSE_POWER);
     338:	72 9a       	sbi	0x0e, 2	; 14
	configure_as_output(SENSE_POWER);
     33a:	6a 9a       	sbi	0x0d, 2	; 13
	
	configure_as_input(S1);
     33c:	85 98       	cbi	0x10, 5	; 16
	pullup_on(S1);
     33e:	8d 9a       	sbi	0x11, 5	; 17
	
	configure_as_input(S2);
     340:	86 98       	cbi	0x10, 6	; 16
	pullup_on(S2);
     342:	8e 9a       	sbi	0x11, 6	; 17
	
	configure_as_input(S3);
     344:	87 98       	cbi	0x10, 7	; 16
	pullup_on(S3);
     346:	8f 9a       	sbi	0x11, 7	; 17
	
	set_low(BT_RESET);
     348:	8c 98       	cbi	0x11, 4	; 17
	configure_as_output(BT_RESET);
     34a:	84 9a       	sbi	0x10, 4	; 16
	
	set_high(LED1);
     34c:	89 9a       	sbi	0x11, 1	; 17
	configure_as_output(LED1);
     34e:	81 9a       	sbi	0x10, 1	; 16
	
	set_high(LED2);
     350:	88 9a       	sbi	0x11, 0	; 17
	configure_as_output(LED2);
     352:	80 9a       	sbi	0x10, 0	; 16
     354:	08 95       	ret

00000356 <Init_Mode>:
#include "IO_Macros.h"

extern int Typewriter_Mode;

void Init_Mode(){
	if (is_low(S1)&&is_high(S2)&&is_high(S3)){ //hold down S1 during initialization to calibrate
     356:	7d 99       	sbic	0x0f, 5	; 15
     358:	0b c0       	rjmp	.+22     	; 0x370 <Init_Mode+0x1a>
     35a:	7e 9b       	sbis	0x0f, 6	; 15
     35c:	09 c0       	rjmp	.+18     	; 0x370 <Init_Mode+0x1a>
     35e:	7f 9b       	sbis	0x0f, 7	; 15
     360:	07 c0       	rjmp	.+14     	; 0x370 <Init_Mode+0x1a>
		Typewriter_Mode = CAL_MODE;
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	90 93 dd 01 	sts	0x01DD, r25
     36a:	80 93 dc 01 	sts	0x01DC, r24
     36e:	08 95       	ret
	}
	else if (is_high(S1)&&is_high(S2)&&is_low(S3)){ //hold down S3 to enter LED indication mode to test reed switches.
     370:	7d 9b       	sbis	0x0f, 5	; 15
     372:	0b c0       	rjmp	.+22     	; 0x38a <Init_Mode+0x34>
     374:	7e 9b       	sbis	0x0f, 6	; 15
     376:	09 c0       	rjmp	.+18     	; 0x38a <Init_Mode+0x34>
     378:	7f 99       	sbic	0x0f, 7	; 15
     37a:	07 c0       	rjmp	.+14     	; 0x38a <Init_Mode+0x34>
		Typewriter_Mode = TEST_MODE;
     37c:	84 e0       	ldi	r24, 0x04	; 4
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	90 93 dd 01 	sts	0x01DD, r25
     384:	80 93 dc 01 	sts	0x01DC, r24
     388:	08 95       	ret
	}
	else{
		Typewriter_Mode = USB_MODE; //otherwise just go into normal USB mode.
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	90 93 dd 01 	sts	0x01DD, r25
     392:	80 93 dc 01 	sts	0x01DC, r24
     396:	08 95       	ret

00000398 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     398:	29 2f       	mov	r18, r25
     39a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     39c:	23 30       	cpi	r18, 0x03	; 3
     39e:	31 05       	cpc	r19, r1
     3a0:	c9 f0       	breq	.+50     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x3c>
     3a2:	44 f4       	brge	.+16     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x1c>
     3a4:	21 30       	cpi	r18, 0x01	; 1
     3a6:	31 05       	cpc	r19, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <CALLBACK_USB_GetDescriptor+0x14>
     3aa:	39 c0       	rjmp	.+114    	; 0x41e <CALLBACK_USB_GetDescriptor+0x86>
     3ac:	22 30       	cpi	r18, 0x02	; 2
     3ae:	31 05       	cpc	r19, r1
     3b0:	61 f0       	breq	.+24     	; 0x3ca <CALLBACK_USB_GetDescriptor+0x32>
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x28>
     3b4:	21 32       	cpi	r18, 0x21	; 33
     3b6:	31 05       	cpc	r19, r1
     3b8:	41 f1       	breq	.+80     	; 0x40a <CALLBACK_USB_GetDescriptor+0x72>
     3ba:	22 32       	cpi	r18, 0x22	; 34
     3bc:	31 05       	cpc	r19, r1
     3be:	51 f1       	breq	.+84     	; 0x414 <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	33 c0       	rjmp	.+102    	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3ca:	82 e2       	ldi	r24, 0x22	; 34
     3cc:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3ce:	20 e2       	ldi	r18, 0x20	; 32
     3d0:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3d2:	2e c0       	rjmp	.+92     	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>
     3d4:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	91 05       	cpc	r25, r1
     3da:	59 f0       	breq	.+22     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x5a>
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	91 05       	cpc	r25, r1
     3e0:	71 f0       	breq	.+28     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x66>
     3e2:	89 2b       	or	r24, r25
     3e4:	09 f5       	brne	.+66     	; 0x428 <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3e6:	ec e1       	ldi	r30, 0x1C	; 28
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	84 91       	lpm	r24, Z
     3ec:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     3ee:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     3f0:	1f c0       	rjmp	.+62     	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3f2:	e2 ef       	ldi	r30, 0xF2	; 242
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	84 91       	lpm	r24, Z
     3f8:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     3fa:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     3fc:	19 c0       	rjmp	.+50     	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3fe:	ec ea       	ldi	r30, 0xAC	; 172
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	84 91       	lpm	r24, Z
     404:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     406:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     408:	13 c0       	rjmp	.+38     	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     40a:	89 e0       	ldi	r24, 0x09	; 9
     40c:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     40e:	22 e3       	ldi	r18, 0x32	; 50
     410:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     412:	0e c0       	rjmp	.+28     	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     414:	8f e3       	ldi	r24, 0x3F	; 63
     416:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     418:	24 e5       	ldi	r18, 0x54	; 84
     41a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     41c:	09 c0       	rjmp	.+18     	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     41e:	82 e1       	ldi	r24, 0x12	; 18
     420:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     422:	22 e4       	ldi	r18, 0x42	; 66
     424:	31 e0       	ldi	r19, 0x01	; 1
     426:	04 c0       	rjmp	.+8      	; 0x430 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     430:	fa 01       	movw	r30, r20
     432:	31 83       	std	Z+1, r19	; 0x01
     434:	20 83       	st	Z, r18
	return Size;
}
     436:	08 95       	ret

00000438 <__vector_17>:
		};
			
		}//infinite loop
}

ISR (TIMER1_COMPA_vect){ //called each time timer1 counts up to the OCR1A register (every couple ms)
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	2f 93       	push	r18
     444:	3f 93       	push	r19
     446:	4f 93       	push	r20
     448:	5f 93       	push	r21
     44a:	6f 93       	push	r22
     44c:	7f 93       	push	r23
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
     452:	af 93       	push	r26
     454:	bf 93       	push	r27
     456:	ef 93       	push	r30
     458:	ff 93       	push	r31
	TMR1_Count ++;
     45a:	80 91 98 01 	lds	r24, 0x0198
     45e:	90 91 99 01 	lds	r25, 0x0199
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	90 93 99 01 	sts	0x0199, r25
     468:	80 93 98 01 	sts	0x0198, r24
	set_low(LED1);
     46c:	89 98       	cbi	0x11, 1	; 17
	set_high(LED2);
     46e:	88 9a       	sbi	0x11, 0	; 17
	HID_Device_USBTask(&Keyboard_HID_Interface); //These are the VITAL usb functions that must be called every so often (Dean Camera recommends every 30ms, no more that 200ms)
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	65 d3       	rcall	.+1738   	; 0xb40 <HID_Device_USBTask>
	USB_USBTask(); //these functions respond to host queries, and they load the usb reports by calling the CALLBACK_HID_Device_CreateHIDReport() function
     476:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <USB_USBTask>

}
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	bf 91       	pop	r27
     480:	af 91       	pop	r26
     482:	9f 91       	pop	r25
     484:	8f 91       	pop	r24
     486:	7f 91       	pop	r23
     488:	6f 91       	pop	r22
     48a:	5f 91       	pop	r21
     48c:	4f 91       	pop	r20
     48e:	3f 91       	pop	r19
     490:	2f 91       	pop	r18
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <SetupHardware>:
void SetupHardware()
{

	
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     49c:	84 b7       	in	r24, 0x34	; 52
     49e:	87 7f       	andi	r24, 0xF7	; 247
     4a0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4a2:	88 e1       	ldi	r24, 0x18	; 24
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	80 93 60 00 	sts	0x0060, r24
     4ac:	10 92 60 00 	sts	0x0060, r1
     4b0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	80 e8       	ldi	r24, 0x80	; 128
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	80 93 61 00 	sts	0x0061, r24
     4be:	90 93 61 00 	sts	0x0061, r25
     4c2:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
	Config_Interrupts();
     4c4:	03 df       	rcall	.-506    	; 0x2cc <Config_Interrupts>
	
	/* Hardware Initialization */
	Config_IO();
     4c6:	16 df       	rcall	.-468    	; 0x2f4 <Config_IO>
	Init_Mode();
     4c8:	46 df       	rcall	.-372    	; 0x356 <Init_Mode>
	
	if(Typewriter_Mode == SD_MODE){
     4ca:	80 91 dc 01 	lds	r24, 0x01DC
     4ce:	90 91 dd 01 	lds	r25, 0x01DD
     4d2:	02 97       	sbiw	r24, 0x02	; 2
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <SetupHardware+0x48>
		//Initialize SD Card
	}
	else if(Typewriter_Mode == BT_MODE){
     4d6:	80 91 dc 01 	lds	r24, 0x01DC
     4da:	90 91 dd 01 	lds	r25, 0x01DD
     4de:	03 97       	sbiw	r24, 0x03	; 3
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <SetupHardware+0x48>
		//Initialize Bluetooth Module
	}
	else{
		//Initialize USB HID mode
	USB_Init(); //
     4e2:	37 c7       	rjmp	.+3694   	; 0x1352 <USB_Init>
     4e4:	08 95       	ret

000004e6 <main>:
{	
	uint8_t key;
	uint8_t code;
	uint8_t modifier;
	uint8_t parity;
	Typewriter_Mode = INITIALIZING;
     4e6:	10 92 dd 01 	sts	0x01DD, r1
     4ea:	10 92 dc 01 	sts	0x01DC, r1
	SetupHardware();
     4ee:	d6 df       	rcall	.-84     	; 0x49c <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4f0:	78 94       	sei
	GlobalInterruptEnable();
	while(1){
		switch (Typewriter_Mode){
     4f2:	80 91 dc 01 	lds	r24, 0x01DC
     4f6:	90 91 dd 01 	lds	r25, 0x01DD
     4fa:	84 30       	cpi	r24, 0x04	; 4
     4fc:	91 05       	cpc	r25, r1
     4fe:	19 f0       	breq	.+6      	; 0x506 <main+0x20>
     500:	05 97       	sbiw	r24, 0x05	; 5
     502:	29 f0       	breq	.+10     	; 0x50e <main+0x28>
     504:	f6 cf       	rjmp	.-20     	; 0x4f2 <main+0xc>
						USBSend(code,modifier);
					}
				}
			}
			case TEST_MODE:
				parity = (uint8_t)is_high(REED_1) + (uint8_t)is_high(REED_2)+ (uint8_t)is_high(REED_3) + (uint8_t)is_high(REED_4);
     506:	89 b1       	in	r24, 0x09	; 9
     508:	89 b1       	in	r24, 0x09	; 9
     50a:	83 b1       	in	r24, 0x03	; 3
     50c:	83 b1       	in	r24, 0x03	; 3
				else{
					//set_low(LED1);
					//set_high(LED2);
				}
			case CAL_MODE:
				Calibrate();
     50e:	89 de       	rcall	.-750    	; 0x222 <Calibrate>
			break;
     510:	f0 cf       	rjmp	.-32     	; 0x4f2 <main+0xc>

00000512 <EVENT_USB_Device_Connect>:
	}
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     512:	08 95       	ret

00000514 <EVENT_USB_Device_Disconnect>:

}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     514:	08 95       	ret

00000516 <EVENT_USB_Device_Suspend>:

}

void EVENT_USB_Device_Suspend(void){
     516:	08 95       	ret

00000518 <EVENT_USB_Device_WakeUp>:
	
}

void EVENT_USB_Device_WakeUp(void){
     518:	08 95       	ret

0000051a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	fc d2       	rcall	.+1528   	; 0xb18 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     520:	e2 ee       	ldi	r30, 0xE2	; 226
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	84 60       	ori	r24, 0x04	; 4
     528:	80 83       	st	Z, r24
     52a:	08 95       	ret

0000052c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	ab c1       	rjmp	.+854    	; 0x888 <HID_Device_ProcessControlRequest>
     532:	08 95       	ret

00000534 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     534:	80 91 0e 01 	lds	r24, 0x010E
     538:	90 91 0f 01 	lds	r25, 0x010F
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	29 f0       	breq	.+10     	; 0x54a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	90 93 0f 01 	sts	0x010F, r25
     546:	80 93 0e 01 	sts	0x010E, r24
     54a:	08 95       	ret

0000054c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	e9 01       	movw	r28, r18
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

	  KeyboardReport->KeyCode[0] = KeyBuffer->KeyCode[0];
     556:	e0 91 9a 01 	lds	r30, 0x019A
     55a:	f0 91 9b 01 	lds	r31, 0x019B
     55e:	82 81       	ldd	r24, Z+2	; 0x02
     560:	8a 83       	std	Y+2, r24	; 0x02


	if (KeyboardReport->KeyCode[0]){
     562:	88 23       	and	r24, r24
     564:	19 f0       	breq	.+6      	; 0x56c <CALLBACK_HID_Device_CreateHIDReport+0x20>
		KeyboardReport->Modifier = KeyBuffer->KeyCode[0];
     566:	82 81       	ldd	r24, Z+2	; 0x02
     568:	88 83       	st	Y, r24
     56a:	02 c0       	rjmp	.+4      	; 0x570 <CALLBACK_HID_Device_CreateHIDReport+0x24>
	}
	else {
		KeyboardReport->Modifier = GetModifier();
     56c:	8c d0       	rcall	.+280    	; 0x686 <GetModifier>
     56e:	88 83       	st	Y, r24
	}
	
	KeyBuffer->KeyCode[0]= 0;  //remove key to send to clear room for the next key.  This indicates to other routines that the USB buffer is available for sending.
     570:	e0 91 9a 01 	lds	r30, 0x019A
     574:	f0 91 9b 01 	lds	r31, 0x019B
     578:	12 82       	std	Z+2, r1	; 0x02
	KeyBuffer->Modifier = 0;
     57a:	10 82       	st	Z, r1

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     57c:	88 e0       	ldi	r24, 0x08	; 8
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	f8 01       	movw	r30, r16
     582:	91 83       	std	Z+1, r25	; 0x01
     584:	80 83       	st	Z, r24
	return false;
}
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     592:	08 95       	ret

00000594 <USBSend>:
#include "KeyCodes.h"
#include "globals.h"
#include <ctype.h> // allows toupper()

void USBSend(uint8_t code,uint8_t mod){	
	TMR1_Count = 0;
     594:	10 92 99 01 	sts	0x0199, r1
     598:	10 92 98 01 	sts	0x0198, r1
	while (KeyBuffer->KeyCode[0] && TMR1_Count < 20) {} //if buffer is full, wait.  If timeout expires, stop waiting.
     59c:	e0 91 9a 01 	lds	r30, 0x019A
     5a0:	f0 91 9b 01 	lds	r31, 0x019B
     5a4:	92 81       	ldd	r25, Z+2	; 0x02
     5a6:	91 11       	cpse	r25, r1
     5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <USBSend+0x14>
	KeyBuffer->KeyCode[0] = code;
     5aa:	82 83       	std	Z+2, r24	; 0x02
	KeyBuffer->Modifier = mod;
     5ac:	60 83       	st	Z, r22
     5ae:	08 95       	ret

000005b0 <USBSendString>:
}



void USBSendString(const char *str){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
	int length;
	int code;
	length = strlen(str);
     5bc:	fc 01       	movw	r30, r24
     5be:	01 90       	ld	r0, Z+
     5c0:	00 20       	and	r0, r0
     5c2:	e9 f7       	brne	.-6      	; 0x5be <USBSendString+0xe>
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	7f 01       	movw	r14, r30
     5c8:	e8 1a       	sub	r14, r24
     5ca:	f9 0a       	sbc	r15, r25
	for (int i=0; i<length; i++){
     5cc:	1e 14       	cp	r1, r14
     5ce:	1f 04       	cpc	r1, r15
     5d0:	84 f4       	brge	.+32     	; 0x5f2 <USBSendString+0x42>
     5d2:	8c 01       	movw	r16, r24
     5d4:	c0 e0       	ldi	r28, 0x00	; 0
     5d6:	d0 e0       	ldi	r29, 0x00	; 0
		code = toupper(str[i]);//make sure code is uppercase.
     5d8:	f8 01       	movw	r30, r16
     5da:	81 91       	ld	r24, Z+
     5dc:	8f 01       	movw	r16, r30
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <toupper>
		code = code-ASCII_A+HID_A;  //Convert the character (which is uppercase Ascii)  to an USB HID Keycode.
		USBSend(code,HID_KEYBOARD_SC_LEFT_SHIFT);
     5e4:	61 ee       	ldi	r22, 0xE1	; 225
     5e6:	8d 53       	subi	r24, 0x3D	; 61
     5e8:	d5 df       	rcall	.-86     	; 0x594 <USBSend>

void USBSendString(const char *str){
	int length;
	int code;
	length = strlen(str);
	for (int i=0; i<length; i++){
     5ea:	21 96       	adiw	r28, 0x01	; 1
     5ec:	ec 16       	cp	r14, r28
     5ee:	fd 06       	cpc	r15, r29
     5f0:	99 f7       	brne	.-26     	; 0x5d8 <USBSendString+0x28>
		code = toupper(str[i]);//make sure code is uppercase.
		code = code-ASCII_A+HID_A;  //Convert the character (which is uppercase Ascii)  to an USB HID Keycode.
		USBSend(code,HID_KEYBOARD_SC_LEFT_SHIFT);
	}
} 
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <USBSendNumber>:

void USBSendNumber(uint8_t number){
     600:	cf 93       	push	r28
	uint8_t ones ;
	uint8_t tens;
	
	ones = number%10;
     602:	cd ec       	ldi	r28, 0xCD	; 205
     604:	8c 9f       	mul	r24, r28
     606:	c1 2d       	mov	r28, r1
     608:	11 24       	eor	r1, r1
     60a:	c6 95       	lsr	r28
     60c:	c6 95       	lsr	r28
     60e:	c6 95       	lsr	r28
     610:	cc 0f       	add	r28, r28
     612:	9c 2f       	mov	r25, r28
     614:	99 0f       	add	r25, r25
     616:	99 0f       	add	r25, r25
     618:	c9 0f       	add	r28, r25
     61a:	28 2f       	mov	r18, r24
     61c:	2c 1b       	sub	r18, r28
     61e:	c2 2f       	mov	r28, r18
	tens = ((number - ones)%100)/10;
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	82 1b       	sub	r24, r18
     624:	91 09       	sbc	r25, r1
     626:	64 e6       	ldi	r22, 0x64	; 100
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divmodhi4>
     62e:	6a e0       	ldi	r22, 0x0A	; 10
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divmodhi4>
     636:	86 2f       	mov	r24, r22
	
	if (tens != 0){
     638:	66 23       	and	r22, r22
     63a:	21 f0       	breq	.+8      	; 0x644 <USBSendNumber+0x44>
		USBSend(29+tens,LOWER);
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	83 5e       	subi	r24, 0xE3	; 227
     640:	a9 df       	rcall	.-174    	; 0x594 <USBSend>
     642:	03 c0       	rjmp	.+6      	; 0x64a <USBSendNumber+0x4a>
	}
	else{
		USBSend(39,LOWER);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	87 e2       	ldi	r24, 0x27	; 39
     648:	a5 df       	rcall	.-182    	; 0x594 <USBSend>
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	90 e7       	ldi	r25, 0x70	; 112
     64e:	22 e0       	ldi	r18, 0x02	; 2
     650:	81 50       	subi	r24, 0x01	; 1
     652:	90 40       	sbci	r25, 0x00	; 0
     654:	20 40       	sbci	r18, 0x00	; 0
     656:	e1 f7       	brne	.-8      	; 0x650 <USBSendNumber+0x50>
     658:	00 c0       	rjmp	.+0      	; 0x65a <USBSendNumber+0x5a>
     65a:	00 00       	nop
	}

	Delay_MS(100);
	
	if (ones!=0){
     65c:	cc 23       	and	r28, r28
     65e:	29 f0       	breq	.+10     	; 0x66a <USBSendNumber+0x6a>
		USBSend(29+ones,LOWER);
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	8d e1       	ldi	r24, 0x1D	; 29
     664:	8c 0f       	add	r24, r28
     666:	96 df       	rcall	.-212    	; 0x594 <USBSend>
     668:	03 c0       	rjmp	.+6      	; 0x670 <USBSendNumber+0x70>
	}
	else{
		USBSend(39,LOWER);
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	87 e2       	ldi	r24, 0x27	; 39
     66e:	92 df       	rcall	.-220    	; 0x594 <USBSend>
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	90 e7       	ldi	r25, 0x70	; 112
     674:	22 e0       	ldi	r18, 0x02	; 2
     676:	81 50       	subi	r24, 0x01	; 1
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	20 40       	sbci	r18, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <USBSendNumber+0x76>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <USBSendNumber+0x80>
     680:	00 00       	nop
	}
	
	Delay_MS(100);
}
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <GetModifier>:
		 if (ShiftKeyCodeLookUpTable[i]== 0xff){ShiftKeyCodeLookUpTable[i] = 0;}
	 }
	 for (int i = 0; i<sizeof(ReedSwitchLookUpTable); i++){
		 if (ReedSwitchLookUpTable[i]== 0xff){ReedSwitchLookUpTable[i] = 0;}
	 }
}
     686:	1d 9b       	sbis	0x03, 5	; 3
     688:	02 c0       	rjmp	.+4      	; 0x68e <GetModifier+0x8>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	01 c0       	rjmp	.+2      	; 0x690 <GetModifier+0xa>
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	7d 9b       	sbis	0x0f, 5	; 15
     692:	82 60       	ori	r24, 0x02	; 2
     694:	7e 9b       	sbis	0x0f, 6	; 15
     696:	80 61       	ori	r24, 0x10	; 16
     698:	9f b1       	in	r25, 0x0f	; 15
     69a:	08 95       	ret

0000069c <ReadSensor>:
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	2e 98       	cbi	0x05, 6	; 5
     6a4:	47 9a       	sbi	0x08, 7	; 8
     6a6:	72 98       	cbi	0x0e, 2	; 14
     6a8:	8f ec       	ldi	r24, 0xCF	; 207
     6aa:	97 e0       	ldi	r25, 0x07	; 7
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <ReadSensor+0x10>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <ReadSensor+0x16>
     6b2:	00 00       	nop
     6b4:	e1 e0       	ldi	r30, 0x01	; 1
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	c1 e0       	ldi	r28, 0x01	; 1
     6ca:	d0 e0       	ldi	r29, 0x00	; 0
     6cc:	2e 9a       	sbi	0x05, 6	; 5
	...
     6d6:	00 00       	nop
     6d8:	2e 98       	cbi	0x05, 6	; 5
	...
     6e2:	00 00       	nop
     6e4:	36 99       	sbic	0x06, 6	; 6
     6e6:	12 c0       	rjmp	.+36     	; 0x70c <ReadSensor+0x70>
     6e8:	de 01       	movw	r26, r28
     6ea:	0e 2e       	mov	r0, r30
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <ReadSensor+0x56>
     6ee:	aa 0f       	add	r26, r26
     6f0:	bb 1f       	adc	r27, r27
     6f2:	0a 94       	dec	r0
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <ReadSensor+0x52>
     6f6:	1b 2f       	mov	r17, r27
     6f8:	11 0f       	add	r17, r17
     6fa:	11 0b       	sbc	r17, r17
     6fc:	2a 2b       	or	r18, r26
     6fe:	3b 2b       	or	r19, r27
     700:	41 2b       	or	r20, r17
     702:	51 2b       	or	r21, r17
     704:	61 2b       	or	r22, r17
     706:	71 2b       	or	r23, r17
     708:	81 2b       	or	r24, r17
     70a:	91 2b       	or	r25, r17
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	e0 33       	cpi	r30, 0x30	; 48
     710:	f1 05       	cpc	r31, r1
     712:	e1 f6       	brne	.-72     	; 0x6cc <ReadSensor+0x30>
     714:	72 9a       	sbi	0x0e, 2	; 14
	...
     71e:	00 00       	nop
     720:	47 98       	cbi	0x08, 7	; 8
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	08 95       	ret

0000072a <GetKey>:
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	b1 df       	rcall	.-158    	; 0x69c <ReadSensor>
     73a:	d2 2e       	mov	r13, r18
     73c:	e3 2e       	mov	r14, r19
     73e:	f4 2e       	mov	r15, r20
     740:	05 2f       	mov	r16, r21
     742:	16 2f       	mov	r17, r22
     744:	d7 2f       	mov	r29, r23
     746:	c8 2f       	mov	r28, r24
     748:	b9 2f       	mov	r27, r25
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	00 90 53 01 	lds	r0, 0x0153
     752:	02 c0       	rjmp	.+4      	; 0x758 <GetKey+0x2e>
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	0a 94       	dec	r0
     75a:	e2 f7       	brpl	.-8      	; 0x754 <GetKey+0x2a>
     75c:	9f 2f       	mov	r25, r31
     75e:	99 0f       	add	r25, r25
     760:	99 0b       	sbc	r25, r25
     762:	2d 2d       	mov	r18, r13
     764:	2e 23       	and	r18, r30
     766:	3e 2d       	mov	r19, r14
     768:	3f 23       	and	r19, r31
     76a:	4f 2d       	mov	r20, r15
     76c:	49 23       	and	r20, r25
     76e:	50 2f       	mov	r21, r16
     770:	59 23       	and	r21, r25
     772:	61 2f       	mov	r22, r17
     774:	69 23       	and	r22, r25
     776:	7d 2f       	mov	r23, r29
     778:	79 23       	and	r23, r25
     77a:	8c 2f       	mov	r24, r28
     77c:	89 23       	and	r24, r25
     77e:	9b 23       	and	r25, r27
     780:	a0 e0       	ldi	r26, 0x00	; 0
     782:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__cmpdi2_s8>
     786:	59 f4       	brne	.+22     	; 0x79e <GetKey+0x74>
     788:	80 91 52 01 	lds	r24, 0x0152
     78c:	88 23       	and	r24, r24
     78e:	61 f0       	breq	.+24     	; 0x7a8 <GetKey+0x7e>
     790:	81 50       	subi	r24, 0x01	; 1
     792:	80 93 52 01 	sts	0x0152, r24
     796:	88 23       	and	r24, r24
     798:	39 f0       	breq	.+14     	; 0x7a8 <GetKey+0x7e>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	1f c0       	rjmp	.+62     	; 0x7dc <GetKey+0xb2>
     79e:	85 e0       	ldi	r24, 0x05	; 5
     7a0:	80 93 52 01 	sts	0x0152, r24
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	1a c0       	rjmp	.+52     	; 0x7dc <GetKey+0xb2>
     7a8:	2d 2d       	mov	r18, r13
     7aa:	3e 2d       	mov	r19, r14
     7ac:	4f 2d       	mov	r20, r15
     7ae:	50 2f       	mov	r21, r16
     7b0:	61 2f       	mov	r22, r17
     7b2:	7d 2f       	mov	r23, r29
     7b4:	8c 2f       	mov	r24, r28
     7b6:	9b 2f       	mov	r25, r27
     7b8:	a0 e0       	ldi	r26, 0x00	; 0
     7ba:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__cmpdi2_s8>
     7be:	49 f0       	breq	.+18     	; 0x7d2 <GetKey+0xa8>
     7c0:	0e 94 23 0c 	call	0x1846	; 0x1846 <__clzdi2>
     7c4:	98 2f       	mov	r25, r24
     7c6:	90 93 53 01 	sts	0x0153, r25
     7ca:	95 e0       	ldi	r25, 0x05	; 5
     7cc:	90 93 52 01 	sts	0x0152, r25
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <GetKey+0xb2>
     7d2:	10 92 53 01 	sts	0x0153, r1
     7d6:	10 92 52 01 	sts	0x0152, r1
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	08 95       	ret

000007ec <ClearKeyCodeTables>:

void ClearKeyCodeTables(){
	memset (&KeyCodeLookUpTable[0] , 0, KEYCODE_LENGTH);
     7ec:	80 e4       	ldi	r24, 0x40	; 64
     7ee:	e4 e5       	ldi	r30, 0x54	; 84
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	df 01       	movw	r26, r30
     7f4:	98 2f       	mov	r25, r24
     7f6:	1d 92       	st	X+, r1
     7f8:	9a 95       	dec	r25
     7fa:	e9 f7       	brne	.-6      	; 0x7f6 <ClearKeyCodeTables+0xa>
	memset (&FnKeyCodeLookUpTable[0] , 0, FN_KEYCODE_LENGTH);
     7fc:	ee ed       	ldi	r30, 0xDE	; 222
     7fe:	f1 e0       	ldi	r31, 0x01	; 1
     800:	df 01       	movw	r26, r30
     802:	98 2f       	mov	r25, r24
     804:	1d 92       	st	X+, r1
     806:	9a 95       	dec	r25
     808:	e9 f7       	brne	.-6      	; 0x804 <ClearKeyCodeTables+0x18>
	memset (&ShiftKeyCodeLookUpTable[0], 0, SHIFT_KEYCODE_LENGTH);
     80a:	ec e9       	ldi	r30, 0x9C	; 156
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	df 01       	movw	r26, r30
     810:	1d 92       	st	X+, r1
     812:	8a 95       	dec	r24
     814:	e9 f7       	brne	.-6      	; 0x810 <ClearKeyCodeTables+0x24>
	memset (&ReedSwitchLookUpTable[0], 0, NUM_REED_SWITCHES);
     816:	10 92 94 01 	sts	0x0194, r1
     81a:	10 92 95 01 	sts	0x0195, r1
     81e:	10 92 96 01 	sts	0x0196, r1
     822:	10 92 97 01 	sts	0x0197, r1
     826:	e4 e5       	ldi	r30, 0x54	; 84
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	84 e9       	ldi	r24, 0x94	; 148
     82c:	91 e0       	ldi	r25, 0x01	; 1
	
	for (int i = 0; i<sizeof(KeyCodeLookUpTable); i++){ //change 0xff (default uninitialized eeprom value) to zero
		if (KeyCodeLookUpTable[i]== 0xff){KeyCodeLookUpTable[i] = 0;}
     82e:	20 81       	ld	r18, Z
     830:	2f 3f       	cpi	r18, 0xFF	; 255
     832:	09 f4       	brne	.+2      	; 0x836 <ClearKeyCodeTables+0x4a>
     834:	10 82       	st	Z, r1
     836:	31 96       	adiw	r30, 0x01	; 1
	memset (&KeyCodeLookUpTable[0] , 0, KEYCODE_LENGTH);
	memset (&FnKeyCodeLookUpTable[0] , 0, FN_KEYCODE_LENGTH);
	memset (&ShiftKeyCodeLookUpTable[0], 0, SHIFT_KEYCODE_LENGTH);
	memset (&ReedSwitchLookUpTable[0], 0, NUM_REED_SWITCHES);
	
	for (int i = 0; i<sizeof(KeyCodeLookUpTable); i++){ //change 0xff (default uninitialized eeprom value) to zero
     838:	e8 17       	cp	r30, r24
     83a:	f9 07       	cpc	r31, r25
     83c:	c1 f7       	brne	.-16     	; 0x82e <ClearKeyCodeTables+0x42>
     83e:	ee ed       	ldi	r30, 0xDE	; 222
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	8e e1       	ldi	r24, 0x1E	; 30
     844:	92 e0       	ldi	r25, 0x02	; 2
		if (KeyCodeLookUpTable[i]== 0xff){KeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(FnKeyCodeLookUpTable); i++){
		if (FnKeyCodeLookUpTable[i]== 0xff){FnKeyCodeLookUpTable[i] = 0;}
     846:	20 81       	ld	r18, Z
     848:	2f 3f       	cpi	r18, 0xFF	; 255
     84a:	09 f4       	brne	.+2      	; 0x84e <ClearKeyCodeTables+0x62>
     84c:	10 82       	st	Z, r1
     84e:	31 96       	adiw	r30, 0x01	; 1
	memset (&ReedSwitchLookUpTable[0], 0, NUM_REED_SWITCHES);
	
	for (int i = 0; i<sizeof(KeyCodeLookUpTable); i++){ //change 0xff (default uninitialized eeprom value) to zero
		if (KeyCodeLookUpTable[i]== 0xff){KeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(FnKeyCodeLookUpTable); i++){
     850:	e8 17       	cp	r30, r24
     852:	f9 07       	cpc	r31, r25
     854:	c1 f7       	brne	.-16     	; 0x846 <ClearKeyCodeTables+0x5a>
     856:	ec e9       	ldi	r30, 0x9C	; 156
     858:	f1 e0       	ldi	r31, 0x01	; 1
     85a:	8c ed       	ldi	r24, 0xDC	; 220
     85c:	91 e0       	ldi	r25, 0x01	; 1
		if (FnKeyCodeLookUpTable[i]== 0xff){FnKeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(ShiftKeyCodeLookUpTable); i++){
		if (ShiftKeyCodeLookUpTable[i]== 0xff){ShiftKeyCodeLookUpTable[i] = 0;}
     85e:	20 81       	ld	r18, Z
     860:	2f 3f       	cpi	r18, 0xFF	; 255
     862:	09 f4       	brne	.+2      	; 0x866 <ClearKeyCodeTables+0x7a>
     864:	10 82       	st	Z, r1
     866:	31 96       	adiw	r30, 0x01	; 1
		if (KeyCodeLookUpTable[i]== 0xff){KeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(FnKeyCodeLookUpTable); i++){
		if (FnKeyCodeLookUpTable[i]== 0xff){FnKeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(ShiftKeyCodeLookUpTable); i++){
     868:	e8 17       	cp	r30, r24
     86a:	f9 07       	cpc	r31, r25
     86c:	c1 f7       	brne	.-16     	; 0x85e <ClearKeyCodeTables+0x72>
     86e:	e4 e9       	ldi	r30, 0x94	; 148
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	88 e9       	ldi	r24, 0x98	; 152
     874:	91 e0       	ldi	r25, 0x01	; 1
		if (ShiftKeyCodeLookUpTable[i]== 0xff){ShiftKeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(ReedSwitchLookUpTable); i++){
		if (ReedSwitchLookUpTable[i]== 0xff){ReedSwitchLookUpTable[i] = 0;}
     876:	20 81       	ld	r18, Z
     878:	2f 3f       	cpi	r18, 0xFF	; 255
     87a:	09 f4       	brne	.+2      	; 0x87e <ClearKeyCodeTables+0x92>
     87c:	10 82       	st	Z, r1
     87e:	31 96       	adiw	r30, 0x01	; 1
		if (FnKeyCodeLookUpTable[i]== 0xff){FnKeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(ShiftKeyCodeLookUpTable); i++){
		if (ShiftKeyCodeLookUpTable[i]== 0xff){ShiftKeyCodeLookUpTable[i] = 0;}
	}
	for (int i = 0; i<sizeof(ReedSwitchLookUpTable); i++){
     880:	e8 17       	cp	r30, r24
     882:	f9 07       	cpc	r31, r25
     884:	c1 f7       	brne	.-16     	; 0x876 <ClearKeyCodeTables+0x8a>
		if (ReedSwitchLookUpTable[i]== 0xff){ReedSwitchLookUpTable[i] = 0;}
	}
}
     886:	08 95       	ret

00000888 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     888:	3f 92       	push	r3
     88a:	4f 92       	push	r4
     88c:	5f 92       	push	r5
     88e:	6f 92       	push	r6
     890:	7f 92       	push	r7
     892:	8f 92       	push	r8
     894:	9f 92       	push	r9
     896:	af 92       	push	r10
     898:	bf 92       	push	r11
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <HID_Device_ProcessControlRequest+0x24>
     8ac:	1f 92       	push	r1
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     8b4:	ed b6       	in	r14, 0x3d	; 61
     8b6:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8b8:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     8bc:	83 ff       	sbrs	r24, 3
     8be:	12 c1       	rjmp	.+548    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     8c0:	f6 01       	movw	r30, r12
     8c2:	80 81       	ld	r24, Z
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	20 91 27 02 	lds	r18, 0x0227
     8ca:	30 91 28 02 	lds	r19, 0x0228
     8ce:	28 17       	cp	r18, r24
     8d0:	39 07       	cpc	r19, r25
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <HID_Device_ProcessControlRequest+0x4e>
     8d4:	07 c1       	rjmp	.+526    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
	  return;

	switch (USB_ControlRequest.bRequest)
     8d6:	80 91 24 02 	lds	r24, 0x0224
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <HID_Device_ProcessControlRequest+0x58>
     8de:	9f c0       	rjmp	.+318    	; 0xa1e <HID_Device_ProcessControlRequest+0x196>
     8e0:	30 f4       	brcc	.+12     	; 0x8ee <HID_Device_ProcessControlRequest+0x66>
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	71 f0       	breq	.+28     	; 0x902 <HID_Device_ProcessControlRequest+0x7a>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	09 f4       	brne	.+2      	; 0x8ec <HID_Device_ProcessControlRequest+0x64>
     8ea:	e1 c0       	rjmp	.+450    	; 0xaae <HID_Device_ProcessControlRequest+0x226>
     8ec:	fb c0       	rjmp	.+502    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
     8ee:	8a 30       	cpi	r24, 0x0A	; 10
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <HID_Device_ProcessControlRequest+0x6c>
     8f2:	c1 c0       	rjmp	.+386    	; 0xa76 <HID_Device_ProcessControlRequest+0x1ee>
     8f4:	8b 30       	cpi	r24, 0x0B	; 11
     8f6:	09 f4       	brne	.+2      	; 0x8fa <HID_Device_ProcessControlRequest+0x72>
     8f8:	aa c0       	rjmp	.+340    	; 0xa4e <HID_Device_ProcessControlRequest+0x1c6>
     8fa:	89 30       	cpi	r24, 0x09	; 9
     8fc:	09 f0       	breq	.+2      	; 0x900 <HID_Device_ProcessControlRequest+0x78>
     8fe:	f2 c0       	rjmp	.+484    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
     900:	50 c0       	rjmp	.+160    	; 0x9a2 <HID_Device_ProcessControlRequest+0x11a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     902:	80 91 23 02 	lds	r24, 0x0223
     906:	81 3a       	cpi	r24, 0xA1	; 161
     908:	09 f0       	breq	.+2      	; 0x90c <HID_Device_ProcessControlRequest+0x84>
     90a:	ec c0       	rjmp	.+472    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
     90c:	8d b6       	in	r8, 0x3d	; 61
     90e:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     910:	1a 82       	std	Y+2, r1	; 0x02
     912:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     914:	e5 e2       	ldi	r30, 0x25	; 37
     916:	f2 e0       	ldi	r31, 0x02	; 2
     918:	80 81       	ld	r24, Z
     91a:	11 81       	ldd	r17, Z+1	; 0x01
     91c:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     91e:	f6 01       	movw	r30, r12
     920:	40 85       	ldd	r20, Z+8	; 0x08
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	8d b7       	in	r24, 0x3d	; 61
     926:	9e b7       	in	r25, 0x3e	; 62
     928:	84 1b       	sub	r24, r20
     92a:	95 0b       	sbc	r25, r21
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	9e bf       	out	0x3e, r25	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	8d bf       	out	0x3d, r24	; 61
     936:	ed b7       	in	r30, 0x3d	; 61
     938:	fe b7       	in	r31, 0x3e	; 62
     93a:	31 96       	adiw	r30, 0x01	; 1
     93c:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	cf 01       	movw	r24, r30
     944:	df d7       	rcall	.+4030   	; 0x1904 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     946:	4f ef       	ldi	r20, 0xFF	; 255
     948:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     94a:	8e 01       	movw	r16, r28
     94c:	0f 5f       	subi	r16, 0xFF	; 255
     94e:	1f 4f       	sbci	r17, 0xFF	; 255
     950:	95 01       	movw	r18, r10
     952:	be 01       	movw	r22, r28
     954:	6d 5f       	subi	r22, 0xFD	; 253
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	c6 01       	movw	r24, r12
     95a:	f8 dd       	rcall	.-1040   	; 0x54c <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     95c:	f6 01       	movw	r30, r12
     95e:	86 81       	ldd	r24, Z+6	; 0x06
     960:	97 81       	ldd	r25, Z+7	; 0x07
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	21 f0       	breq	.+8      	; 0x96e <HID_Device_ProcessControlRequest+0xe6>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     966:	40 85       	ldd	r20, Z+8	; 0x08
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	b5 01       	movw	r22, r10
     96c:	c2 d7       	rcall	.+3972   	; 0x18f2 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     96e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     972:	e8 ee       	ldi	r30, 0xE8	; 232
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	87 7f       	andi	r24, 0xF7	; 247
     97a:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     980:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     984:	69 81       	ldd	r22, Y+1	; 0x01
     986:	7a 81       	ldd	r23, Y+2	; 0x02
     988:	c5 01       	movw	r24, r10
     98a:	f4 d1       	rcall	.+1000   	; 0xd74 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     98c:	e8 ee       	ldi	r30, 0xE8	; 232
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8b 77       	andi	r24, 0x7B	; 123
     994:	80 83       	st	Z, r24
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	9e be       	out	0x3e, r9	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	8d be       	out	0x3d, r8	; 61
     9a0:	a1 c0       	rjmp	.+322    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     9a2:	80 91 23 02 	lds	r24, 0x0223
     9a6:	81 32       	cpi	r24, 0x21	; 33
     9a8:	09 f0       	breq	.+2      	; 0x9ac <HID_Device_ProcessControlRequest+0x124>
     9aa:	9c c0       	rjmp	.+312    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
     9ac:	6d b6       	in	r6, 0x3d	; 61
     9ae:	7e b6       	in	r7, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     9b0:	a0 90 29 02 	lds	r10, 0x0229
     9b4:	b0 90 2a 02 	lds	r11, 0x022A
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     9b8:	e5 e2       	ldi	r30, 0x25	; 37
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	50 80       	ld	r5, Z
     9be:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     9c0:	8d b7       	in	r24, 0x3d	; 61
     9c2:	9e b7       	in	r25, 0x3e	; 62
     9c4:	8a 19       	sub	r24, r10
     9c6:	9b 09       	sbc	r25, r11
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	9e bf       	out	0x3e, r25	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	8d bf       	out	0x3d, r24	; 61
     9d2:	ed b7       	in	r30, 0x3d	; 61
     9d4:	fe b7       	in	r31, 0x3e	; 62
     9d6:	31 96       	adiw	r30, 0x01	; 1
     9d8:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9da:	08 ee       	ldi	r16, 0xE8	; 232
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	f8 01       	movw	r30, r16
     9e0:	80 81       	ld	r24, Z
     9e2:	87 7f       	andi	r24, 0xF7	; 247
     9e4:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     9e6:	b5 01       	movw	r22, r10
     9e8:	c4 01       	movw	r24, r8
     9ea:	49 d2       	rcall	.+1170   	; 0xe7e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9ec:	f8 01       	movw	r30, r16
     9ee:	80 81       	ld	r24, Z
     9f0:	8e 77       	andi	r24, 0x7E	; 126
     9f2:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	51 10       	cpse	r5, r1
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <HID_Device_ProcessControlRequest+0x174>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	85 01       	movw	r16, r10
     a00:	02 1b       	sub	r16, r18
     a02:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     a04:	28 0d       	add	r18, r8
     a06:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     a08:	4f ef       	ldi	r20, 0xFF	; 255
     a0a:	44 0d       	add	r20, r4

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     a0c:	65 2d       	mov	r22, r5
     a0e:	c6 01       	movw	r24, r12
     a10:	c0 dd       	rcall	.-1152   	; 0x592 <CALLBACK_HID_Device_ProcessHIDReport>
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	7e be       	out	0x3e, r7	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	6d be       	out	0x3d, r6	; 61
     a1c:	63 c0       	rjmp	.+198    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a1e:	80 91 23 02 	lds	r24, 0x0223
     a22:	81 3a       	cpi	r24, 0xA1	; 161
     a24:	09 f0       	breq	.+2      	; 0xa28 <HID_Device_ProcessControlRequest+0x1a0>
     a26:	5e c0       	rjmp	.+188    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a28:	e8 ee       	ldi	r30, 0xE8	; 232
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	87 7f       	andi	r24, 0xF7	; 247
     a30:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a32:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     a34:	80 ff       	sbrs	r24, 0
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <HID_Device_ProcessControlRequest+0x1aa>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     a38:	f6 01       	movw	r30, r12
     a3a:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a3c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a40:	e8 ee       	ldi	r30, 0xE8	; 232
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	8e 77       	andi	r24, 0x7E	; 126
     a48:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     a4a:	dd d3       	rcall	.+1978   	; 0x1206 <Endpoint_ClearStatusStage>
     a4c:	4b c0       	rjmp	.+150    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a4e:	80 91 23 02 	lds	r24, 0x0223
     a52:	81 32       	cpi	r24, 0x21	; 33
     a54:	09 f0       	breq	.+2      	; 0xa58 <HID_Device_ProcessControlRequest+0x1d0>
     a56:	46 c0       	rjmp	.+140    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a58:	e8 ee       	ldi	r30, 0xE8	; 232
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a62:	d1 d3       	rcall	.+1954   	; 0x1206 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     a64:	90 91 25 02 	lds	r25, 0x0225
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	91 11       	cpse	r25, r1
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <HID_Device_ProcessControlRequest+0x1e8>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	f6 01       	movw	r30, r12
     a72:	81 87       	std	Z+9, r24	; 0x09
     a74:	37 c0       	rjmp	.+110    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a76:	80 91 23 02 	lds	r24, 0x0223
     a7a:	81 32       	cpi	r24, 0x21	; 33
     a7c:	99 f5       	brne	.+102    	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
     a7e:	e8 ee       	ldi	r30, 0xE8	; 232
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	87 7f       	andi	r24, 0xF7	; 247
     a86:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a88:	be d3       	rcall	.+1916   	; 0x1206 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     a8a:	80 91 25 02 	lds	r24, 0x0225
     a8e:	90 91 26 02 	lds	r25, 0x0226
     a92:	88 27       	eor	r24, r24
     a94:	00 24       	eor	r0, r0
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	00 1c       	adc	r0, r0
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	00 1c       	adc	r0, r0
     aa2:	89 2f       	mov	r24, r25
     aa4:	90 2d       	mov	r25, r0
     aa6:	f6 01       	movw	r30, r12
     aa8:	95 87       	std	Z+13, r25	; 0x0d
     aaa:	84 87       	std	Z+12, r24	; 0x0c
     aac:	1b c0       	rjmp	.+54     	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     aae:	80 91 23 02 	lds	r24, 0x0223
     ab2:	81 3a       	cpi	r24, 0xA1	; 161
     ab4:	b9 f4       	brne	.+46     	; 0xae4 <HID_Device_ProcessControlRequest+0x25c>
     ab6:	e8 ee       	ldi	r30, 0xE8	; 232
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	87 7f       	andi	r24, 0xF7	; 247
     abe:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ac0:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     ac2:	80 ff       	sbrs	r24, 0
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <HID_Device_ProcessControlRequest+0x238>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     ac6:	f6 01       	movw	r30, r12
     ac8:	84 85       	ldd	r24, Z+12	; 0x0c
     aca:	95 85       	ldd	r25, Z+13	; 0x0d
     acc:	96 95       	lsr	r25
     ace:	87 95       	ror	r24
     ad0:	96 95       	lsr	r25
     ad2:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ad4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ad8:	e8 ee       	ldi	r30, 0xE8	; 232
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	8e 77       	andi	r24, 0x7E	; 126
     ae0:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ae2:	91 d3       	rcall	.+1826   	; 0x1206 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	fe be       	out	0x3e, r15	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	ed be       	out	0x3d, r14	; 61
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	7f 90       	pop	r7
     b0e:	6f 90       	pop	r6
     b10:	5f 90       	pop	r5
     b12:	4f 90       	pop	r4
     b14:	3f 90       	pop	r3
     b16:	08 95       	ret

00000b18 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     b18:	fc 01       	movw	r30, r24
     b1a:	39 96       	adiw	r30, 0x09	; 9
     b1c:	27 e0       	ldi	r18, 0x07	; 7
     b1e:	df 01       	movw	r26, r30
     b20:	1d 92       	st	X+, r1
     b22:	2a 95       	dec	r18
     b24:	e9 f7       	brne	.-6      	; 0xb20 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	fc 01       	movw	r30, r24
     b2a:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     b2c:	24 ef       	ldi	r18, 0xF4	; 244
     b2e:	31 e0       	ldi	r19, 0x01	; 1
     b30:	35 87       	std	Z+13, r19	; 0x0d
     b32:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     b34:	23 e0       	ldi	r18, 0x03	; 3
     b36:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	07 c3       	rjmp	.+1550   	; 0x114c <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     b3e:	08 95       	ret

00000b40 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     b40:	5f 92       	push	r5
     b42:	6f 92       	push	r6
     b44:	7f 92       	push	r7
     b46:	8f 92       	push	r8
     b48:	9f 92       	push	r9
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <HID_Device_USBTask+0x20>
     b60:	1f 92       	push	r1
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     b68:	cd b6       	in	r12, 0x3d	; 61
     b6a:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     b6c:	80 91 22 02 	lds	r24, 0x0222
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f0       	breq	.+2      	; 0xb76 <HID_Device_USBTask+0x36>
     b74:	8a c0       	rjmp	.+276    	; 0xc8a <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b76:	80 91 e4 00 	lds	r24, 0x00E4
     b7a:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     b7e:	f7 01       	movw	r30, r14
     b80:	22 85       	ldd	r18, Z+10	; 0x0a
     b82:	33 85       	ldd	r19, Z+11	; 0x0b
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	09 f4       	brne	.+2      	; 0xb8c <HID_Device_USBTask+0x4c>
     b8a:	7f c0       	rjmp	.+254    	; 0xc8a <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b8c:	81 81       	ldd	r24, Z+1	; 0x01
     b8e:	8f 70       	andi	r24, 0x0F	; 15
     b90:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b94:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     b98:	85 ff       	sbrs	r24, 5
     b9a:	77 c0       	rjmp	.+238    	; 0xc8a <HID_Device_USBTask+0x14a>
     b9c:	8d b6       	in	r8, 0x3d	; 61
     b9e:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     ba0:	40 85       	ldd	r20, Z+8	; 0x08
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	8d b7       	in	r24, 0x3d	; 61
     ba6:	9e b7       	in	r25, 0x3e	; 62
     ba8:	84 1b       	sub	r24, r20
     baa:	95 0b       	sbc	r25, r21
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	9e bf       	out	0x3e, r25	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	8d bf       	out	0x3d, r24	; 61
     bb6:	ed b7       	in	r30, 0x3d	; 61
     bb8:	fe b7       	in	r31, 0x3e	; 62
     bba:	31 96       	adiw	r30, 0x01	; 1
     bbc:	5f 01       	movw	r10, r30
		uint8_t  ReportID     = 0;
     bbe:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     bc0:	1a 82       	std	Y+2, r1	; 0x02
     bc2:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	cf 01       	movw	r24, r30
     bca:	9c d6       	rcall	.+3384   	; 0x1904 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     bcc:	8e 01       	movw	r16, r28
     bce:	0f 5f       	subi	r16, 0xFF	; 255
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	95 01       	movw	r18, r10
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	be 01       	movw	r22, r28
     bd8:	6d 5f       	subi	r22, 0xFD	; 253
     bda:	7f 4f       	sbci	r23, 0xFF	; 255
     bdc:	c7 01       	movw	r24, r14
     bde:	b6 dc       	rcall	.-1684   	; 0x54c <CALLBACK_HID_Device_CreateHIDReport>
     be0:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     be2:	f7 01       	movw	r30, r14
     be4:	24 85       	ldd	r18, Z+12	; 0x0c
     be6:	35 85       	ldd	r19, Z+13	; 0x0d
     be8:	23 2b       	or	r18, r19
     bea:	41 f0       	breq	.+16     	; 0xbfc <HID_Device_USBTask+0xbc>
     bec:	21 e0       	ldi	r18, 0x01	; 1
     bee:	86 85       	ldd	r24, Z+14	; 0x0e
     bf0:	97 85       	ldd	r25, Z+15	; 0x0f
     bf2:	89 2b       	or	r24, r25
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <HID_Device_USBTask+0xb8>
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	52 2e       	mov	r5, r18
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <HID_Device_USBTask+0xbe>
     bfc:	51 2c       	mov	r5, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     bfe:	f7 01       	movw	r30, r14
     c00:	06 81       	ldd	r16, Z+6	; 0x06
     c02:	17 81       	ldd	r17, Z+7	; 0x07
     c04:	01 15       	cp	r16, r1
     c06:	11 05       	cpc	r17, r1
     c08:	89 f0       	breq	.+34     	; 0xc2c <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     c0a:	49 81       	ldd	r20, Y+1	; 0x01
     c0c:	5a 81       	ldd	r21, Y+2	; 0x02
     c0e:	b8 01       	movw	r22, r16
     c10:	c5 01       	movw	r24, r10
     c12:	62 d6       	rcall	.+3268   	; 0x18d8 <memcmp>
     c14:	77 24       	eor	r7, r7
     c16:	73 94       	inc	r7
     c18:	89 2b       	or	r24, r25
     c1a:	09 f4       	brne	.+2      	; 0xc1e <HID_Device_USBTask+0xde>
     c1c:	71 2c       	mov	r7, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     c1e:	f7 01       	movw	r30, r14
     c20:	40 85       	ldd	r20, Z+8	; 0x08
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	b5 01       	movw	r22, r10
     c26:	c8 01       	movw	r24, r16
     c28:	64 d6       	rcall	.+3272   	; 0x18f2 <memcpy>
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     c2c:	71 2c       	mov	r7, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     c2e:	29 81       	ldd	r18, Y+1	; 0x01
     c30:	3a 81       	ldd	r19, Y+2	; 0x02
     c32:	23 2b       	or	r18, r19
     c34:	f1 f0       	breq	.+60     	; 0xc72 <HID_Device_USBTask+0x132>
     c36:	61 10       	cpse	r6, r1
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <HID_Device_USBTask+0x102>
     c3a:	71 10       	cpse	r7, r1
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <HID_Device_USBTask+0x102>
     c3e:	50 fe       	sbrs	r5, 0
     c40:	18 c0       	rjmp	.+48     	; 0xc72 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     c42:	f7 01       	movw	r30, r14
     c44:	84 85       	ldd	r24, Z+12	; 0x0c
     c46:	95 85       	ldd	r25, Z+13	; 0x0d
     c48:	97 87       	std	Z+15, r25	; 0x0f
     c4a:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c4c:	81 81       	ldd	r24, Z+1	; 0x01
     c4e:	8f 70       	andi	r24, 0x0F	; 15
     c50:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c58:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     c5c:	69 81       	ldd	r22, Y+1	; 0x01
     c5e:	7a 81       	ldd	r23, Y+2	; 0x02
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	c5 01       	movw	r24, r10
     c66:	29 d0       	rcall	.+82     	; 0xcba <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c68:	e8 ee       	ldi	r30, 0xE8	; 232
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	8e 77       	andi	r24, 0x7E	; 126
     c70:	80 83       	st	Z, r24
     c72:	80 91 e4 00 	lds	r24, 0x00E4
     c76:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     c7a:	f7 01       	movw	r30, r14
     c7c:	93 87       	std	Z+11, r25	; 0x0b
     c7e:	82 87       	std	Z+10, r24	; 0x0a
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	9e be       	out	0x3e, r9	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	8d be       	out	0x3d, r8	; 61
	}
}
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de be       	out	0x3e, r13	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd be       	out	0x3d, r12	; 61
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	7f 90       	pop	r7
     cb4:	6f 90       	pop	r6
     cb6:	5f 90       	pop	r5
     cb8:	08 95       	ret

00000cba <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     cba:	8f 92       	push	r8
     cbc:	9f 92       	push	r9
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	7c 01       	movw	r14, r24
     cd4:	eb 01       	movw	r28, r22
     cd6:	5a 01       	movw	r10, r20
     cd8:	ba d2       	rcall	.+1396   	; 0x124e <Endpoint_WaitUntilReady>
     cda:	81 11       	cpse	r24, r1
     cdc:	3e c0       	rjmp	.+124    	; 0xd5a <Endpoint_Write_Stream_LE+0xa0>
     cde:	a1 14       	cp	r10, r1
     ce0:	b1 04       	cpc	r11, r1
     ce2:	39 f0       	breq	.+14     	; 0xcf2 <Endpoint_Write_Stream_LE+0x38>
     ce4:	f5 01       	movw	r30, r10
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	c8 1b       	sub	r28, r24
     cec:	d9 0b       	sbc	r29, r25
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	20 97       	sbiw	r28, 0x00	; 0
     cf4:	79 f1       	breq	.+94     	; 0xd54 <Endpoint_Write_Stream_LE+0x9a>
     cf6:	00 e0       	ldi	r16, 0x00	; 0
     cf8:	10 e0       	ldi	r17, 0x00	; 0
     cfa:	0f 2e       	mov	r0, r31
     cfc:	f8 ee       	ldi	r31, 0xE8	; 232
     cfe:	8f 2e       	mov	r8, r31
     d00:	91 2c       	mov	r9, r1
     d02:	f0 2d       	mov	r31, r0
     d04:	0f 2e       	mov	r0, r31
     d06:	f1 ef       	ldi	r31, 0xF1	; 241
     d08:	cf 2e       	mov	r12, r31
     d0a:	d1 2c       	mov	r13, r1
     d0c:	f0 2d       	mov	r31, r0
     d0e:	f4 01       	movw	r30, r8
     d10:	80 81       	ld	r24, Z
     d12:	85 fd       	sbrc	r24, 5
     d14:	14 c0       	rjmp	.+40     	; 0xd3e <Endpoint_Write_Stream_LE+0x84>
     d16:	80 81       	ld	r24, Z
     d18:	8e 77       	andi	r24, 0x7E	; 126
     d1a:	80 83       	st	Z, r24
     d1c:	66 d5       	rcall	.+2764   	; 0x17ea <USB_USBTask>
     d1e:	a1 14       	cp	r10, r1
     d20:	b1 04       	cpc	r11, r1
     d22:	49 f0       	breq	.+18     	; 0xd36 <Endpoint_Write_Stream_LE+0x7c>
     d24:	f5 01       	movw	r30, r10
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	08 0f       	add	r16, r24
     d2c:	19 1f       	adc	r17, r25
     d2e:	11 83       	std	Z+1, r17	; 0x01
     d30:	00 83       	st	Z, r16
     d32:	85 e0       	ldi	r24, 0x05	; 5
     d34:	12 c0       	rjmp	.+36     	; 0xd5a <Endpoint_Write_Stream_LE+0xa0>
     d36:	8b d2       	rcall	.+1302   	; 0x124e <Endpoint_WaitUntilReady>
     d38:	88 23       	and	r24, r24
     d3a:	49 f0       	breq	.+18     	; 0xd4e <Endpoint_Write_Stream_LE+0x94>
     d3c:	0e c0       	rjmp	.+28     	; 0xd5a <Endpoint_Write_Stream_LE+0xa0>
     d3e:	f7 01       	movw	r30, r14
     d40:	81 91       	ld	r24, Z+
     d42:	7f 01       	movw	r14, r30
     d44:	f6 01       	movw	r30, r12
     d46:	80 83       	st	Z, r24
     d48:	21 97       	sbiw	r28, 0x01	; 1
     d4a:	0f 5f       	subi	r16, 0xFF	; 255
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	20 97       	sbiw	r28, 0x00	; 0
     d50:	f1 f6       	brne	.-68     	; 0xd0e <Endpoint_Write_Stream_LE+0x54>
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <Endpoint_Write_Stream_LE+0x9e>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <Endpoint_Write_Stream_LE+0xa0>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	af 90       	pop	r10
     d6e:	9f 90       	pop	r9
     d70:	8f 90       	pop	r8
     d72:	08 95       	ret

00000d74 <Endpoint_Write_Control_Stream_LE>:
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	20 91 29 02 	lds	r18, 0x0229
     d86:	30 91 2a 02 	lds	r19, 0x022A
     d8a:	26 17       	cp	r18, r22
     d8c:	37 07       	cpc	r19, r23
     d8e:	58 f0       	brcs	.+22     	; 0xda6 <Endpoint_Write_Control_Stream_LE+0x32>
     d90:	61 15       	cp	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	39 f4       	brne	.+14     	; 0xda4 <Endpoint_Write_Control_Stream_LE+0x30>
     d96:	e8 ee       	ldi	r30, 0xE8	; 232
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	20 81       	ld	r18, Z
     d9c:	2e 77       	andi	r18, 0x7E	; 126
     d9e:	20 83       	st	Z, r18
     da0:	9b 01       	movw	r18, r22
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <Endpoint_Write_Control_Stream_LE+0x32>
     da4:	9b 01       	movw	r18, r22
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	e8 ee       	ldi	r30, 0xE8	; 232
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	03 ef       	ldi	r16, 0xF3	; 243
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	62 ef       	ldi	r22, 0xF2	; 242
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	c1 ef       	ldi	r28, 0xF1	; 241
     db6:	d0 e0       	ldi	r29, 0x00	; 0
     db8:	ff 24       	eor	r15, r15
     dba:	f3 94       	inc	r15
     dbc:	e1 2c       	mov	r14, r1
     dbe:	38 c0       	rjmp	.+112    	; 0xe30 <Endpoint_Write_Control_Stream_LE+0xbc>
     dc0:	40 91 22 02 	lds	r20, 0x0222
     dc4:	44 23       	and	r20, r20
     dc6:	09 f4       	brne	.+2      	; 0xdca <Endpoint_Write_Control_Stream_LE+0x56>
     dc8:	47 c0       	rjmp	.+142    	; 0xe58 <Endpoint_Write_Control_Stream_LE+0xe4>
     dca:	45 30       	cpi	r20, 0x05	; 5
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <Endpoint_Write_Control_Stream_LE+0x5c>
     dce:	46 c0       	rjmp	.+140    	; 0xe5c <Endpoint_Write_Control_Stream_LE+0xe8>
     dd0:	40 81       	ld	r20, Z
     dd2:	43 fd       	sbrc	r20, 3
     dd4:	45 c0       	rjmp	.+138    	; 0xe60 <Endpoint_Write_Control_Stream_LE+0xec>
     dd6:	40 81       	ld	r20, Z
     dd8:	42 ff       	sbrs	r20, 2
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <Endpoint_Write_Control_Stream_LE+0x6e>
     ddc:	e8 ee       	ldi	r30, 0xE8	; 232
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	36 c0       	rjmp	.+108    	; 0xe4e <Endpoint_Write_Control_Stream_LE+0xda>
     de2:	40 81       	ld	r20, Z
     de4:	40 ff       	sbrs	r20, 0
     de6:	24 c0       	rjmp	.+72     	; 0xe30 <Endpoint_Write_Control_Stream_LE+0xbc>
     de8:	d8 01       	movw	r26, r16
     dea:	dc 90       	ld	r13, X
     dec:	db 01       	movw	r26, r22
     dee:	4c 91       	ld	r20, X
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	5d 29       	or	r21, r13
     df4:	21 15       	cp	r18, r1
     df6:	31 05       	cpc	r19, r1
     df8:	99 f0       	breq	.+38     	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xac>
     dfa:	48 30       	cpi	r20, 0x08	; 8
     dfc:	51 05       	cpc	r21, r1
     dfe:	80 f4       	brcc	.+32     	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xac>
     e00:	a8 2f       	mov	r26, r24
     e02:	b9 2f       	mov	r27, r25
     e04:	8d 91       	ld	r24, X+
     e06:	88 83       	st	Y, r24
     e08:	8a 2f       	mov	r24, r26
     e0a:	9b 2f       	mov	r25, r27
     e0c:	21 50       	subi	r18, 0x01	; 1
     e0e:	31 09       	sbc	r19, r1
     e10:	4f 5f       	subi	r20, 0xFF	; 255
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	21 15       	cp	r18, r1
     e16:	31 05       	cpc	r19, r1
     e18:	19 f0       	breq	.+6      	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xac>
     e1a:	48 30       	cpi	r20, 0x08	; 8
     e1c:	51 05       	cpc	r21, r1
     e1e:	91 f7       	brne	.-28     	; 0xe04 <Endpoint_Write_Control_Stream_LE+0x90>
     e20:	af 2d       	mov	r26, r15
     e22:	48 30       	cpi	r20, 0x08	; 8
     e24:	51 05       	cpc	r21, r1
     e26:	09 f0       	breq	.+2      	; 0xe2a <Endpoint_Write_Control_Stream_LE+0xb6>
     e28:	ae 2d       	mov	r26, r14
     e2a:	40 81       	ld	r20, Z
     e2c:	4e 77       	andi	r20, 0x7E	; 126
     e2e:	40 83       	st	Z, r20
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	29 f6       	brne	.-118    	; 0xdc0 <Endpoint_Write_Control_Stream_LE+0x4c>
     e36:	a1 11       	cpse	r26, r1
     e38:	c3 cf       	rjmp	.-122    	; 0xdc0 <Endpoint_Write_Control_Stream_LE+0x4c>
     e3a:	d0 cf       	rjmp	.-96     	; 0xddc <Endpoint_Write_Control_Stream_LE+0x68>
     e3c:	80 91 22 02 	lds	r24, 0x0222
     e40:	88 23       	and	r24, r24
     e42:	81 f0       	breq	.+32     	; 0xe64 <Endpoint_Write_Control_Stream_LE+0xf0>
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	81 f0       	breq	.+32     	; 0xe68 <Endpoint_Write_Control_Stream_LE+0xf4>
     e48:	80 81       	ld	r24, Z
     e4a:	83 fd       	sbrc	r24, 3
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <Endpoint_Write_Control_Stream_LE+0xf8>
     e4e:	80 81       	ld	r24, Z
     e50:	82 ff       	sbrs	r24, 2
     e52:	f4 cf       	rjmp	.-24     	; 0xe3c <Endpoint_Write_Control_Stream_LE+0xc8>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <Endpoint_Write_Control_Stream_LE+0xfa>
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	09 c0       	rjmp	.+18     	; 0xe6e <Endpoint_Write_Control_Stream_LE+0xfa>
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <Endpoint_Write_Control_Stream_LE+0xfa>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <Endpoint_Write_Control_Stream_LE+0xfa>
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <Endpoint_Write_Control_Stream_LE+0xfa>
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <Endpoint_Write_Control_Stream_LE+0xfa>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	08 95       	ret

00000e7e <Endpoint_Read_Control_Stream_LE>:
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	61 15       	cp	r22, r1
     e8e:	71 05       	cpc	r23, r1
     e90:	29 f4       	brne	.+10     	; 0xe9c <Endpoint_Read_Control_Stream_LE+0x1e>
     e92:	e8 ee       	ldi	r30, 0xE8	; 232
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	20 81       	ld	r18, Z
     e98:	2b 77       	andi	r18, 0x7B	; 123
     e9a:	20 83       	st	Z, r18
     e9c:	e8 ee       	ldi	r30, 0xE8	; 232
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	43 ef       	ldi	r20, 0xF3	; 243
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	0f 2e       	mov	r0, r31
     ea6:	f2 ef       	ldi	r31, 0xF2	; 242
     ea8:	cf 2e       	mov	r12, r31
     eaa:	d1 2c       	mov	r13, r1
     eac:	f0 2d       	mov	r31, r0
     eae:	01 ef       	ldi	r16, 0xF1	; 241
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	22 c0       	rjmp	.+68     	; 0xef8 <Endpoint_Read_Control_Stream_LE+0x7a>
     eb4:	20 91 22 02 	lds	r18, 0x0222
     eb8:	22 23       	and	r18, r18
     eba:	e1 f1       	breq	.+120    	; 0xf34 <Endpoint_Read_Control_Stream_LE+0xb6>
     ebc:	25 30       	cpi	r18, 0x05	; 5
     ebe:	e1 f1       	breq	.+120    	; 0xf38 <Endpoint_Read_Control_Stream_LE+0xba>
     ec0:	20 81       	ld	r18, Z
     ec2:	23 fd       	sbrc	r18, 3
     ec4:	3b c0       	rjmp	.+118    	; 0xf3c <Endpoint_Read_Control_Stream_LE+0xbe>
     ec6:	20 81       	ld	r18, Z
     ec8:	22 ff       	sbrs	r18, 2
     eca:	f4 cf       	rjmp	.-24     	; 0xeb4 <Endpoint_Read_Control_Stream_LE+0x36>
     ecc:	43 c0       	rjmp	.+134    	; 0xf54 <Endpoint_Read_Control_Stream_LE+0xd6>
     ece:	e8 01       	movw	r28, r16
     ed0:	88 81       	ld	r24, Y
     ed2:	8d 93       	st	X+, r24
     ed4:	8a 2f       	mov	r24, r26
     ed6:	9b 2f       	mov	r25, r27
     ed8:	61 50       	subi	r22, 0x01	; 1
     eda:	71 09       	sbc	r23, r1
     edc:	61 15       	cp	r22, r1
     ede:	71 05       	cpc	r23, r1
     ee0:	41 f0       	breq	.+16     	; 0xef2 <Endpoint_Read_Control_Stream_LE+0x74>
     ee2:	ea 01       	movw	r28, r20
     ee4:	f8 80       	ld	r15, Y
     ee6:	e6 01       	movw	r28, r12
     ee8:	28 81       	ld	r18, Y
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3f 29       	or	r19, r15
     eee:	23 2b       	or	r18, r19
     ef0:	71 f7       	brne	.-36     	; 0xece <Endpoint_Read_Control_Stream_LE+0x50>
     ef2:	20 81       	ld	r18, Z
     ef4:	2b 77       	andi	r18, 0x7B	; 123
     ef6:	20 83       	st	Z, r18
     ef8:	61 15       	cp	r22, r1
     efa:	71 05       	cpc	r23, r1
     efc:	19 f4       	brne	.+6      	; 0xf04 <Endpoint_Read_Control_Stream_LE+0x86>
     efe:	e8 ee       	ldi	r30, 0xE8	; 232
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	13 c0       	rjmp	.+38     	; 0xf2a <Endpoint_Read_Control_Stream_LE+0xac>
     f04:	20 91 22 02 	lds	r18, 0x0222
     f08:	22 23       	and	r18, r18
     f0a:	d1 f0       	breq	.+52     	; 0xf40 <Endpoint_Read_Control_Stream_LE+0xc2>
     f0c:	25 30       	cpi	r18, 0x05	; 5
     f0e:	d1 f0       	breq	.+52     	; 0xf44 <Endpoint_Read_Control_Stream_LE+0xc6>
     f10:	20 81       	ld	r18, Z
     f12:	23 fd       	sbrc	r18, 3
     f14:	19 c0       	rjmp	.+50     	; 0xf48 <Endpoint_Read_Control_Stream_LE+0xca>
     f16:	20 81       	ld	r18, Z
     f18:	22 fd       	sbrc	r18, 2
     f1a:	1c c0       	rjmp	.+56     	; 0xf54 <Endpoint_Read_Control_Stream_LE+0xd6>
     f1c:	cb cf       	rjmp	.-106    	; 0xeb4 <Endpoint_Read_Control_Stream_LE+0x36>
     f1e:	80 91 22 02 	lds	r24, 0x0222
     f22:	88 23       	and	r24, r24
     f24:	99 f0       	breq	.+38     	; 0xf4c <Endpoint_Read_Control_Stream_LE+0xce>
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	99 f0       	breq	.+38     	; 0xf50 <Endpoint_Read_Control_Stream_LE+0xd2>
     f2a:	80 81       	ld	r24, Z
     f2c:	80 ff       	sbrs	r24, 0
     f2e:	f7 cf       	rjmp	.-18     	; 0xf1e <Endpoint_Read_Control_Stream_LE+0xa0>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	1b c0       	rjmp	.+54     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	19 c0       	rjmp	.+50     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	17 c0       	rjmp	.+46     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	15 c0       	rjmp	.+42     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	13 c0       	rjmp	.+38     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	11 c0       	rjmp	.+34     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	0d c0       	rjmp	.+26     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	0b c0       	rjmp	.+22     	; 0xf6a <Endpoint_Read_Control_Stream_LE+0xec>
     f54:	ea 01       	movw	r28, r20
     f56:	a8 81       	ld	r26, Y
     f58:	e6 01       	movw	r28, r12
     f5a:	28 81       	ld	r18, Y
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3a 2b       	or	r19, r26
     f60:	23 2b       	or	r18, r19
     f62:	39 f2       	breq	.-114    	; 0xef2 <Endpoint_Read_Control_Stream_LE+0x74>
     f64:	a8 2f       	mov	r26, r24
     f66:	b9 2f       	mov	r27, r25
     f68:	b2 cf       	rjmp	.-156    	; 0xece <Endpoint_Read_Control_Stream_LE+0x50>
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f88:	20 91 29 02 	lds	r18, 0x0229
     f8c:	30 91 2a 02 	lds	r19, 0x022A
     f90:	26 17       	cp	r18, r22
     f92:	37 07       	cpc	r19, r23
     f94:	58 f0       	brcs	.+22     	; 0xfac <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f96:	61 15       	cp	r22, r1
     f98:	71 05       	cpc	r23, r1
     f9a:	39 f4       	brne	.+14     	; 0xfaa <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f9c:	e8 ee       	ldi	r30, 0xE8	; 232
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	20 81       	ld	r18, Z
     fa2:	2e 77       	andi	r18, 0x7E	; 126
     fa4:	20 83       	st	Z, r18
     fa6:	9b 01       	movw	r18, r22
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <Endpoint_Write_Control_PStream_LE+0x32>
     faa:	9b 01       	movw	r18, r22
     fac:	e8 2f       	mov	r30, r24
     fae:	f9 2f       	mov	r31, r25
     fb0:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fb2:	a8 ee       	ldi	r26, 0xE8	; 232
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     fb6:	63 ef       	ldi	r22, 0xF3	; 243
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	42 ef       	ldi	r20, 0xF2	; 242
     fbc:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fbe:	0f 2e       	mov	r0, r31
     fc0:	f1 ef       	ldi	r31, 0xF1	; 241
     fc2:	cf 2e       	mov	r12, r31
     fc4:	d1 2c       	mov	r13, r1
     fc6:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fc8:	01 e0       	ldi	r16, 0x01	; 1
     fca:	f1 2c       	mov	r15, r1
     fcc:	34 c0       	rjmp	.+104    	; 0x1036 <Endpoint_Write_Control_PStream_LE+0xbc>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fce:	80 91 22 02 	lds	r24, 0x0222

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fd2:	88 23       	and	r24, r24
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <Endpoint_Write_Control_PStream_LE+0x5e>
     fd6:	43 c0       	rjmp	.+134    	; 0x105e <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fd8:	85 30       	cpi	r24, 0x05	; 5
     fda:	09 f4       	brne	.+2      	; 0xfde <Endpoint_Write_Control_PStream_LE+0x64>
     fdc:	42 c0       	rjmp	.+132    	; 0x1062 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fde:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fe0:	83 fd       	sbrc	r24, 3
     fe2:	41 c0       	rjmp	.+130    	; 0x1066 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fe4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     fe6:	82 ff       	sbrs	r24, 2
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <Endpoint_Write_Control_PStream_LE+0x76>
     fea:	e8 ee       	ldi	r30, 0xE8	; 232
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	32 c0       	rjmp	.+100    	; 0x1054 <Endpoint_Write_Control_PStream_LE+0xda>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ff0:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     ff2:	80 ff       	sbrs	r24, 0
     ff4:	20 c0       	rjmp	.+64     	; 0x1036 <Endpoint_Write_Control_PStream_LE+0xbc>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     ff6:	eb 01       	movw	r28, r22
     ff8:	18 81       	ld	r17, Y
     ffa:	ea 01       	movw	r28, r20
     ffc:	88 81       	ld	r24, Y
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1002:	21 15       	cp	r18, r1
    1004:	31 05       	cpc	r19, r1
    1006:	81 f0       	breq	.+32     	; 0x1028 <Endpoint_Write_Control_PStream_LE+0xae>
    1008:	88 30       	cpi	r24, 0x08	; 8
    100a:	91 05       	cpc	r25, r1
    100c:	68 f4       	brcc	.+26     	; 0x1028 <Endpoint_Write_Control_PStream_LE+0xae>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    100e:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1010:	e6 01       	movw	r28, r12
    1012:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1014:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1016:	21 50       	subi	r18, 0x01	; 1
    1018:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    101a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	19 f0       	breq	.+6      	; 0x1028 <Endpoint_Write_Control_PStream_LE+0xae>
    1022:	88 30       	cpi	r24, 0x08	; 8
    1024:	91 05       	cpc	r25, r1
    1026:	99 f7       	brne	.-26     	; 0x100e <Endpoint_Write_Control_PStream_LE+0x94>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1028:	10 2f       	mov	r17, r16
    102a:	08 97       	sbiw	r24, 0x08	; 8
    102c:	09 f0       	breq	.+2      	; 0x1030 <Endpoint_Write_Control_PStream_LE+0xb6>
    102e:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1030:	8c 91       	ld	r24, X
    1032:	8e 77       	andi	r24, 0x7E	; 126
    1034:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1036:	21 15       	cp	r18, r1
    1038:	31 05       	cpc	r19, r1
    103a:	49 f6       	brne	.-110    	; 0xfce <Endpoint_Write_Control_PStream_LE+0x54>
    103c:	11 11       	cpse	r17, r1
    103e:	c7 cf       	rjmp	.-114    	; 0xfce <Endpoint_Write_Control_PStream_LE+0x54>
    1040:	d4 cf       	rjmp	.-88     	; 0xfea <Endpoint_Write_Control_PStream_LE+0x70>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1042:	80 91 22 02 	lds	r24, 0x0222

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1046:	88 23       	and	r24, r24
    1048:	81 f0       	breq	.+32     	; 0x106a <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    104a:	85 30       	cpi	r24, 0x05	; 5
    104c:	81 f0       	breq	.+32     	; 0x106e <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    104e:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1050:	83 fd       	sbrc	r24, 3
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1054:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1056:	82 ff       	sbrs	r24, 2
    1058:	f4 cf       	rjmp	.-24     	; 0x1042 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0b c0       	rjmp	.+22     	; 0x1074 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1072:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	08 95       	ret

00001084 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	87 30       	cpi	r24, 0x07	; 7
    109c:	70 f1       	brcs	.+92     	; 0x10fa <Endpoint_ConfigureEndpoint_Prv+0x76>
    109e:	26 c0       	rjmp	.+76     	; 0x10ec <Endpoint_ConfigureEndpoint_Prv+0x68>
    10a0:	59 2f       	mov	r21, r25
    10a2:	5f 70       	andi	r21, 0x0F	; 15
    10a4:	e8 01       	movw	r28, r16
    10a6:	58 83       	st	Y, r21
    10a8:	89 17       	cp	r24, r25
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <Endpoint_ConfigureEndpoint_Prv+0x34>
    10ac:	e9 01       	movw	r28, r18
    10ae:	d8 80       	ld	r13, Y
    10b0:	50 81       	ld	r21, Z
    10b2:	e4 01       	movw	r28, r8
    10b4:	78 81       	ld	r23, Y
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <Endpoint_ConfigureEndpoint_Prv+0x3a>
    10b8:	5b 2d       	mov	r21, r11
    10ba:	d6 2e       	mov	r13, r22
    10bc:	7c 2d       	mov	r23, r12
    10be:	51 ff       	sbrs	r21, 1
    10c0:	12 c0       	rjmp	.+36     	; 0x10e6 <Endpoint_ConfigureEndpoint_Prv+0x62>
    10c2:	4c 91       	ld	r20, X
    10c4:	4e 7f       	andi	r20, 0xFE	; 254
    10c6:	4c 93       	st	X, r20
    10c8:	40 81       	ld	r20, Z
    10ca:	4d 7f       	andi	r20, 0xFD	; 253
    10cc:	40 83       	st	Z, r20
    10ce:	4c 91       	ld	r20, X
    10d0:	41 60       	ori	r20, 0x01	; 1
    10d2:	4c 93       	st	X, r20
    10d4:	e9 01       	movw	r28, r18
    10d6:	d8 82       	st	Y, r13
    10d8:	50 83       	st	Z, r21
    10da:	e4 01       	movw	r28, r8
    10dc:	78 83       	st	Y, r23
    10de:	e7 01       	movw	r28, r14
    10e0:	58 81       	ld	r21, Y
    10e2:	55 23       	and	r21, r21
    10e4:	44 f4       	brge	.+16     	; 0x10f6 <Endpoint_ConfigureEndpoint_Prv+0x72>
    10e6:	9f 5f       	subi	r25, 0xFF	; 255
    10e8:	97 30       	cpi	r25, 0x07	; 7
    10ea:	d1 f6       	brne	.-76     	; 0x10a0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    10ec:	8f 70       	andi	r24, 0x0F	; 15
    10ee:	80 93 e9 00 	sts	0x00E9, r24
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	1f c0       	rjmp	.+62     	; 0x1134 <Endpoint_ConfigureEndpoint_Prv+0xb0>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	1d c0       	rjmp	.+58     	; 0x1134 <Endpoint_ConfigureEndpoint_Prv+0xb0>
    10fa:	98 2f       	mov	r25, r24
    10fc:	9f 70       	andi	r25, 0x0F	; 15
    10fe:	90 93 e9 00 	sts	0x00E9, r25
    1102:	98 2f       	mov	r25, r24
    1104:	54 2f       	mov	r21, r20
    1106:	d6 2e       	mov	r13, r22
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	ab ee       	ldi	r26, 0xEB	; 235
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ed ee       	ldi	r30, 0xED	; 237
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	2c ee       	ldi	r18, 0xEC	; 236
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	0f 2e       	mov	r0, r31
    1118:	f0 ef       	ldi	r31, 0xF0	; 240
    111a:	8f 2e       	mov	r8, r31
    111c:	91 2c       	mov	r9, r1
    111e:	f0 2d       	mov	r31, r0
    1120:	0f 2e       	mov	r0, r31
    1122:	fe ee       	ldi	r31, 0xEE	; 238
    1124:	ef 2e       	mov	r14, r31
    1126:	f1 2c       	mov	r15, r1
    1128:	f0 2d       	mov	r31, r0
    112a:	09 ee       	ldi	r16, 0xE9	; 233
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	b4 2e       	mov	r11, r20
    1130:	c1 2c       	mov	r12, r1
    1132:	c5 cf       	rjmp	.-118    	; 0x10be <Endpoint_ConfigureEndpoint_Prv+0x3a>
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	9f 90       	pop	r9
    1148:	8f 90       	pop	r8
    114a:	08 95       	ret

0000114c <Endpoint_ConfigureEndpointTable>:
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	06 2f       	mov	r16, r22
    1160:	66 23       	and	r22, r22
    1162:	09 f4       	brne	.+2      	; 0x1166 <Endpoint_ConfigureEndpointTable+0x1a>
    1164:	41 c0       	rjmp	.+130    	; 0x11e8 <Endpoint_ConfigureEndpointTable+0x9c>
    1166:	c8 2f       	mov	r28, r24
    1168:	d9 2f       	mov	r29, r25
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	f1 2c       	mov	r15, r1
    116e:	68 94       	set
    1170:	dd 24       	eor	r13, r13
    1172:	d3 f8       	bld	r13, 3
    1174:	e1 2c       	mov	r14, r1
    1176:	68 94       	set
    1178:	bb 24       	eor	r11, r11
    117a:	b1 f8       	bld	r11, 1
    117c:	0f 2e       	mov	r0, r31
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	cf 2e       	mov	r12, r31
    1182:	f0 2d       	mov	r31, r0
    1184:	58 81       	ld	r21, Y
    1186:	55 23       	and	r21, r21
    1188:	51 f1       	breq	.+84     	; 0x11de <Endpoint_ConfigureEndpointTable+0x92>
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	e9 81       	ldd	r30, Y+1	; 0x01
    118e:	fa 81       	ldd	r31, Y+2	; 0x02
    1190:	7b 81       	ldd	r23, Y+3	; 0x03
    1192:	85 2f       	mov	r24, r21
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	87 30       	cpi	r24, 0x07	; 7
    1198:	48 f5       	brcc	.+82     	; 0x11ec <Endpoint_ConfigureEndpointTable+0xa0>
    119a:	92 30       	cpi	r25, 0x02	; 2
    119c:	10 f0       	brcs	.+4      	; 0x11a2 <Endpoint_ConfigureEndpointTable+0x56>
    119e:	4c 2d       	mov	r20, r12
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <Endpoint_ConfigureEndpointTable+0x58>
    11a2:	4b 2d       	mov	r20, r11
    11a4:	e9 30       	cpi	r30, 0x09	; 9
    11a6:	f1 05       	cpc	r31, r1
    11a8:	50 f0       	brcs	.+20     	; 0x11be <Endpoint_ConfigureEndpointTable+0x72>
    11aa:	2d 2d       	mov	r18, r13
    11ac:	3e 2d       	mov	r19, r14
    11ae:	9f 2d       	mov	r25, r15
    11b0:	9f 5f       	subi	r25, 0xFF	; 255
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	2e 17       	cp	r18, r30
    11b8:	3f 07       	cpc	r19, r31
    11ba:	d0 f3       	brcs	.-12     	; 0x11b0 <Endpoint_ConfigureEndpointTable+0x64>
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <Endpoint_ConfigureEndpointTable+0x74>
    11be:	9f 2d       	mov	r25, r15
    11c0:	92 95       	swap	r25
    11c2:	90 7f       	andi	r25, 0xF0	; 240
    11c4:	49 2b       	or	r20, r25
    11c6:	55 1f       	adc	r21, r21
    11c8:	55 27       	eor	r21, r21
    11ca:	55 1f       	adc	r21, r21
    11cc:	90 e4       	ldi	r25, 0x40	; 64
    11ce:	79 9f       	mul	r23, r25
    11d0:	90 01       	movw	r18, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	65 2f       	mov	r22, r21
    11d6:	62 2b       	or	r22, r18
    11d8:	55 df       	rcall	.-342    	; 0x1084 <Endpoint_ConfigureEndpoint_Prv>
    11da:	88 23       	and	r24, r24
    11dc:	51 f0       	breq	.+20     	; 0x11f2 <Endpoint_ConfigureEndpointTable+0xa6>
    11de:	1f 5f       	subi	r17, 0xFF	; 255
    11e0:	25 96       	adiw	r28, 0x05	; 5
    11e2:	10 13       	cpse	r17, r16
    11e4:	cf cf       	rjmp	.-98     	; 0x1184 <Endpoint_ConfigureEndpointTable+0x38>
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <Endpoint_ConfigureEndpointTable+0xa4>
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <Endpoint_ConfigureEndpointTable+0xa6>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <Endpoint_ConfigureEndpointTable+0xa6>
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	bf 90       	pop	r11
    1204:	08 95       	ret

00001206 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1206:	80 91 23 02 	lds	r24, 0x0223
    120a:	88 23       	and	r24, r24
    120c:	1c f0       	brlt	.+6      	; 0x1214 <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    120e:	e8 ee       	ldi	r30, 0xE8	; 232
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	14 c0       	rjmp	.+40     	; 0x123c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1214:	e8 ee       	ldi	r30, 0xE8	; 232
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <Endpoint_ClearStatusStage+0x1c>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    121a:	80 91 22 02 	lds	r24, 0x0222
    121e:	88 23       	and	r24, r24
    1220:	a9 f0       	breq	.+42     	; 0x124c <Endpoint_ClearStatusStage+0x46>
    1222:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1224:	82 ff       	sbrs	r24, 2
    1226:	f9 cf       	rjmp	.-14     	; 0x121a <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1228:	e8 ee       	ldi	r30, 0xE8	; 232
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8b 77       	andi	r24, 0x7B	; 123
    1230:	80 83       	st	Z, r24
    1232:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1234:	80 91 22 02 	lds	r24, 0x0222
    1238:	88 23       	and	r24, r24
    123a:	41 f0       	breq	.+16     	; 0x124c <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    123c:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    123e:	80 ff       	sbrs	r24, 0
    1240:	f9 cf       	rjmp	.-14     	; 0x1234 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1242:	e8 ee       	ldi	r30, 0xE8	; 232
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8e 77       	andi	r24, 0x7E	; 126
    124a:	80 83       	st	Z, r24
    124c:	08 95       	ret

0000124e <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1256:	20 91 e4 00 	lds	r18, 0x00E4
    125a:	30 91 e5 00 	lds	r19, 0x00E5
    125e:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1260:	ac ee       	ldi	r26, 0xEC	; 236
    1262:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1264:	e8 ee       	ldi	r30, 0xE8	; 232
    1266:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1268:	0b ee       	ldi	r16, 0xEB	; 235
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	44 ee       	ldi	r20, 0xE4	; 228
    126e:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1270:	8c 91       	ld	r24, X
    1272:	80 fd       	sbrc	r24, 0
    1274:	21 c0       	rjmp	.+66     	; 0x12b8 <Endpoint_WaitUntilReady+0x6a>
    1276:	24 c0       	rjmp	.+72     	; 0x12c0 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1278:	80 91 22 02 	lds	r24, 0x0222

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    127c:	88 23       	and	r24, r24
    127e:	81 f0       	breq	.+32     	; 0x12a0 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1280:	85 30       	cpi	r24, 0x05	; 5
    1282:	81 f0       	breq	.+32     	; 0x12a4 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1284:	e8 01       	movw	r28, r16
    1286:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1288:	85 fd       	sbrc	r24, 5
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <Endpoint_WaitUntilReady+0x5a>
    128c:	ea 01       	movw	r28, r20
    128e:	88 81       	ld	r24, Y
    1290:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1292:	28 17       	cp	r18, r24
    1294:	39 07       	cpc	r19, r25
    1296:	61 f3       	breq	.-40     	; 0x1270 <Endpoint_WaitUntilReady+0x22>
    1298:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    129a:	41 f0       	breq	.+16     	; 0x12ac <Endpoint_WaitUntilReady+0x5e>
    129c:	9c 01       	movw	r18, r24
    129e:	e8 cf       	rjmp	.-48     	; 0x1270 <Endpoint_WaitUntilReady+0x22>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	12 c0       	rjmp	.+36     	; 0x12c8 <Endpoint_WaitUntilReady+0x7a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	10 c0       	rjmp	.+32     	; 0x12c8 <Endpoint_WaitUntilReady+0x7a>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	0e c0       	rjmp	.+28     	; 0x12c8 <Endpoint_WaitUntilReady+0x7a>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	0c c0       	rjmp	.+24     	; 0x12c8 <Endpoint_WaitUntilReady+0x7a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0a c0       	rjmp	.+20     	; 0x12c8 <Endpoint_WaitUntilReady+0x7a>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <Endpoint_WaitUntilReady+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12b8:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    12ba:	80 ff       	sbrs	r24, 0
    12bc:	dd cf       	rjmp	.-70     	; 0x1278 <Endpoint_WaitUntilReady+0x2a>
    12be:	f8 cf       	rjmp	.-16     	; 0x12b0 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12c0:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    12c2:	82 ff       	sbrs	r24, 2
    12c4:	d9 cf       	rjmp	.-78     	; 0x1278 <Endpoint_WaitUntilReady+0x2a>
    12c6:	f6 cf       	rjmp	.-20     	; 0x12b4 <Endpoint_WaitUntilReady+0x66>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    12da:	4c d0       	rcall	.+152    	; 0x1374 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    12dc:	53 d0       	rcall	.+166    	; 0x1384 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    12de:	c8 ed       	ldi	r28, 0xD8	; 216
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
    12e2:	88 81       	ld	r24, Y
    12e4:	8f 77       	andi	r24, 0x7F	; 127
    12e6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    12e8:	88 81       	ld	r24, Y
    12ea:	80 68       	ori	r24, 0x80	; 128
    12ec:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    12ee:	88 81       	ld	r24, Y
    12f0:	8f 7d       	andi	r24, 0xDF	; 223
    12f2:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    12f4:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    12f6:	10 92 22 02 	sts	0x0222, r1
	USB_Device_ConfigurationNumber  = 0;
    12fa:	10 92 1e 02 	sts	0x021E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    12fe:	10 92 20 02 	sts	0x0220, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1302:	10 92 1f 02 	sts	0x021F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1306:	00 ee       	ldi	r16, 0xE0	; 224
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	f8 01       	movw	r30, r16
    130c:	80 81       	ld	r24, Z
    130e:	8b 7f       	andi	r24, 0xFB	; 251
    1310:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1312:	88 81       	ld	r24, Y
    1314:	81 60       	ori	r24, 0x01	; 1
    1316:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1318:	42 e0       	ldi	r20, 0x02	; 2
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	b2 de       	rcall	.-668    	; 0x1084 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1320:	e1 ee       	ldi	r30, 0xE1	; 225
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8e 7f       	andi	r24, 0xFE	; 254
    1328:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    132a:	e2 ee       	ldi	r30, 0xE2	; 226
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	81 60       	ori	r24, 0x01	; 1
    1332:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1334:	80 81       	ld	r24, Z
    1336:	88 60       	ori	r24, 0x08	; 8
    1338:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    133a:	f8 01       	movw	r30, r16
    133c:	80 81       	ld	r24, Z
    133e:	8e 7f       	andi	r24, 0xFE	; 254
    1340:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1342:	88 81       	ld	r24, Y
    1344:	80 61       	ori	r24, 0x10	; 16
    1346:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1352:	e8 ed       	ldi	r30, 0xD8	; 216
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8f 7e       	andi	r24, 0xEF	; 239
    135a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    135c:	e7 ed       	ldi	r30, 0xD7	; 215
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	80 93 21 02 	sts	0x0221, r24

	USB_ResetInterface();
    1370:	b0 cf       	rjmp	.-160    	; 0x12d2 <USB_ResetInterface>
    1372:	08 95       	ret

00001374 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1374:	e8 ed       	ldi	r30, 0xD8	; 216
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    137e:	10 92 e2 00 	sts	0x00E2, r1
    1382:	08 95       	ret

00001384 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1384:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1388:	10 92 e1 00 	sts	0x00E1, r1
    138c:	08 95       	ret

0000138e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    13b0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    13b4:	82 ff       	sbrs	r24, 2
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    13b8:	80 91 e2 00 	lds	r24, 0x00E2
    13bc:	82 ff       	sbrs	r24, 2
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    13c0:	e1 ee       	ldi	r30, 0xE1	; 225
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8b 7f       	andi	r24, 0xFB	; 251
    13c8:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    13ca:	b4 d8       	rcall	.-3736   	; 0x534 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    13cc:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    13d0:	80 ff       	sbrs	r24, 0
    13d2:	1c c0       	rjmp	.+56     	; 0x140c <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    13d4:	80 91 d8 00 	lds	r24, 0x00D8
    13d8:	80 ff       	sbrs	r24, 0
    13da:	18 c0       	rjmp	.+48     	; 0x140c <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    13dc:	ea ed       	ldi	r30, 0xDA	; 218
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8e 7f       	andi	r24, 0xFE	; 254
    13e4:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    13e6:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    13ea:	80 ff       	sbrs	r24, 0
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <__vector_10+0x76>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13ee:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    13f4:	09 b4       	in	r0, 0x29	; 41
    13f6:	00 fe       	sbrs	r0, 0
    13f8:	fd cf       	rjmp	.-6      	; 0x13f4 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 22 02 	sts	0x0222, r24
			EVENT_USB_Device_Connect();
    1400:	88 d8       	rcall	.-3824   	; 0x512 <EVENT_USB_Device_Connect>
    1402:	04 c0       	rjmp	.+8      	; 0x140c <__vector_10+0x7e>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1404:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1406:	10 92 22 02 	sts	0x0222, r1
			EVENT_USB_Device_Disconnect();
    140a:	84 d8       	rcall	.-3832   	; 0x514 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    140c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1410:	80 ff       	sbrs	r24, 0
    1412:	16 c0       	rjmp	.+44     	; 0x1440 <__vector_10+0xb2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1414:	80 91 e2 00 	lds	r24, 0x00E2
    1418:	80 ff       	sbrs	r24, 0
    141a:	12 c0       	rjmp	.+36     	; 0x1440 <__vector_10+0xb2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    141c:	e2 ee       	ldi	r30, 0xE2	; 226
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8e 7f       	andi	r24, 0xFE	; 254
    1424:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1426:	80 81       	ld	r24, Z
    1428:	80 61       	ori	r24, 0x10	; 16
    142a:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    142c:	e8 ed       	ldi	r30, 0xD8	; 216
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 62       	ori	r24, 0x20	; 32
    1434:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1436:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1438:	85 e0       	ldi	r24, 0x05	; 5
    143a:	80 93 22 02 	sts	0x0222, r24
		EVENT_USB_Device_Suspend();
    143e:	6b d8       	rcall	.-3882   	; 0x516 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1440:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1444:	84 ff       	sbrs	r24, 4
    1446:	2e c0       	rjmp	.+92     	; 0x14a4 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1448:	80 91 e2 00 	lds	r24, 0x00E2
    144c:	84 ff       	sbrs	r24, 4
    144e:	2a c0       	rjmp	.+84     	; 0x14a4 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1450:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1456:	09 b4       	in	r0, 0x29	; 41
    1458:	00 fe       	sbrs	r0, 0
    145a:	fd cf       	rjmp	.-6      	; 0x1456 <__vector_10+0xc8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    145c:	e8 ed       	ldi	r30, 0xD8	; 216
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8f 7d       	andi	r24, 0xDF	; 223
    1464:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1466:	e1 ee       	ldi	r30, 0xE1	; 225
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8f 7e       	andi	r24, 0xEF	; 239
    146e:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1470:	e2 ee       	ldi	r30, 0xE2	; 226
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 7e       	andi	r24, 0xEF	; 239
    1478:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    147a:	80 81       	ld	r24, Z
    147c:	81 60       	ori	r24, 0x01	; 1
    147e:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1480:	80 91 1e 02 	lds	r24, 0x021E
    1484:	88 23       	and	r24, r24
    1486:	21 f0       	breq	.+8      	; 0x1490 <__vector_10+0x102>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	80 93 22 02 	sts	0x0222, r24
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1490:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1494:	88 23       	and	r24, r24
    1496:	14 f4       	brge	.+4      	; 0x149c <__vector_10+0x10e>
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	01 c0       	rjmp	.+2      	; 0x149e <__vector_10+0x110>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 22 02 	sts	0x0222, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    14a2:	3a d8       	rcall	.-3980   	; 0x518 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    14a4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    14a8:	83 ff       	sbrs	r24, 3
    14aa:	1e c0       	rjmp	.+60     	; 0x14e8 <__vector_10+0x15a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    14ac:	80 91 e2 00 	lds	r24, 0x00E2
    14b0:	83 ff       	sbrs	r24, 3
    14b2:	1a c0       	rjmp	.+52     	; 0x14e8 <__vector_10+0x15a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    14b4:	e1 ee       	ldi	r30, 0xE1	; 225
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	87 7f       	andi	r24, 0xF7	; 247
    14bc:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	80 93 22 02 	sts	0x0222, r24
		USB_Device_ConfigurationNumber = 0;
    14c4:	10 92 1e 02 	sts	0x021E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    14c8:	80 81       	ld	r24, Z
    14ca:	8e 7f       	andi	r24, 0xFE	; 254
    14cc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    14ce:	e2 ee       	ldi	r30, 0xE2	; 226
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8e 7f       	andi	r24, 0xFE	; 254
    14d6:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    14d8:	80 81       	ld	r24, Z
    14da:	80 61       	ori	r24, 0x10	; 16
    14dc:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14de:	42 e0       	ldi	r20, 0x02	; 2
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	cf dd       	rcall	.-1122   	; 0x1084 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    14e6:	80 d1       	rcall	.+768    	; 0x17e8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	aa 97       	sbiw	r28, 0x2a	; 42
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	e3 e2       	ldi	r30, 0x23	; 35
    1524:	f2 e0       	ldi	r31, 0x02	; 2
    1526:	8b e2       	ldi	r24, 0x2B	; 43
    1528:	92 e0       	ldi	r25, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    152a:	a1 ef       	ldi	r26, 0xF1	; 241
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1530:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1532:	e8 17       	cp	r30, r24
    1534:	f9 07       	cpc	r31, r25
    1536:	d9 f7       	brne	.-10     	; 0x152e <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1538:	0e 94 96 02 	call	0x52c	; 0x52c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    153c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1540:	83 ff       	sbrs	r24, 3
    1542:	2d c1       	rjmp	.+602    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1544:	90 91 23 02 	lds	r25, 0x0223

		switch (USB_ControlRequest.bRequest)
    1548:	80 91 24 02 	lds	r24, 0x0224
    154c:	85 30       	cpi	r24, 0x05	; 5
    154e:	09 f4       	brne	.+2      	; 0x1552 <USB_Device_ProcessControlRequest+0x48>
    1550:	78 c0       	rjmp	.+240    	; 0x1642 <USB_Device_ProcessControlRequest+0x138>
    1552:	30 f4       	brcc	.+12     	; 0x1560 <USB_Device_ProcessControlRequest+0x56>
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	b1 f1       	breq	.+108    	; 0x15c4 <USB_Device_ProcessControlRequest+0xba>
    1558:	68 f0       	brcs	.+26     	; 0x1574 <USB_Device_ProcessControlRequest+0x6a>
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	99 f1       	breq	.+102    	; 0x15c4 <USB_Device_ProcessControlRequest+0xba>
    155e:	1f c1       	rjmp	.+574    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
    1560:	88 30       	cpi	r24, 0x08	; 8
    1562:	09 f4       	brne	.+2      	; 0x1566 <USB_Device_ProcessControlRequest+0x5c>
    1564:	e9 c0       	rjmp	.+466    	; 0x1738 <USB_Device_ProcessControlRequest+0x22e>
    1566:	89 30       	cpi	r24, 0x09	; 9
    1568:	09 f4       	brne	.+2      	; 0x156c <USB_Device_ProcessControlRequest+0x62>
    156a:	f6 c0       	rjmp	.+492    	; 0x1758 <USB_Device_ProcessControlRequest+0x24e>
    156c:	86 30       	cpi	r24, 0x06	; 6
    156e:	09 f0       	breq	.+2      	; 0x1572 <USB_Device_ProcessControlRequest+0x68>
    1570:	16 c1       	rjmp	.+556    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
    1572:	8a c0       	rjmp	.+276    	; 0x1688 <USB_Device_ProcessControlRequest+0x17e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1574:	90 38       	cpi	r25, 0x80	; 128
    1576:	21 f0       	breq	.+8      	; 0x1580 <USB_Device_ProcessControlRequest+0x76>
    1578:	92 38       	cpi	r25, 0x82	; 130
    157a:	09 f0       	breq	.+2      	; 0x157e <USB_Device_ProcessControlRequest+0x74>
    157c:	10 c1       	rjmp	.+544    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
    157e:	08 c0       	rjmp	.+16     	; 0x1590 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1580:	80 91 1f 02 	lds	r24, 0x021F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1584:	90 91 20 02 	lds	r25, 0x0220
    1588:	99 23       	and	r25, r25
    158a:	71 f0       	breq	.+28     	; 0x15a8 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    158c:	82 60       	ori	r24, 0x02	; 2
    158e:	0c c0       	rjmp	.+24     	; 0x15a8 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1590:	80 91 27 02 	lds	r24, 0x0227
    1594:	8f 70       	andi	r24, 0x0F	; 15
    1596:	e9 ee       	ldi	r30, 0xE9	; 233
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    159c:	80 91 eb 00 	lds	r24, 0x00EB
    15a0:	85 fb       	bst	r24, 5
    15a2:	88 27       	eor	r24, r24
    15a4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15a6:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15a8:	e8 ee       	ldi	r30, 0xE8	; 232
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	90 81       	ld	r25, Z
    15ae:	97 7f       	andi	r25, 0xF7	; 247
    15b0:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    15b2:	a1 ef       	ldi	r26, 0xF1	; 241
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    15b8:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15ba:	80 81       	ld	r24, Z
    15bc:	8e 77       	andi	r24, 0x7E	; 126
    15be:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    15c0:	22 de       	rcall	.-956    	; 0x1206 <Endpoint_ClearStatusStage>
    15c2:	ed c0       	rjmp	.+474    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15c4:	99 23       	and	r25, r25
    15c6:	09 f4       	brne	.+2      	; 0x15ca <USB_Device_ProcessControlRequest+0xc0>
    15c8:	f9 c0       	rjmp	.+498    	; 0x17bc <USB_Device_ProcessControlRequest+0x2b2>
    15ca:	92 30       	cpi	r25, 0x02	; 2
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <USB_Device_ProcessControlRequest+0xc6>
    15ce:	e7 c0       	rjmp	.+462    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
    15d0:	fa c0       	rjmp	.+500    	; 0x17c6 <USB_Device_ProcessControlRequest+0x2bc>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	09 f0       	breq	.+2      	; 0x15da <USB_Device_ProcessControlRequest+0xd0>
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	90 93 20 02 	sts	0x0220, r25
    15de:	28 c0       	rjmp	.+80     	; 0x1630 <USB_Device_ProcessControlRequest+0x126>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15e0:	20 91 27 02 	lds	r18, 0x0227
    15e4:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    15e6:	09 f4       	brne	.+2      	; 0x15ea <USB_Device_ProcessControlRequest+0xe0>
    15e8:	da c0       	rjmp	.+436    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15ea:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    15ee:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    15f2:	80 ff       	sbrs	r24, 0
    15f4:	1d c0       	rjmp	.+58     	; 0x1630 <USB_Device_ProcessControlRequest+0x126>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    15f6:	80 91 24 02 	lds	r24, 0x0224
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	31 f4       	brne	.+12     	; 0x160a <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    15fe:	eb ee       	ldi	r30, 0xEB	; 235
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 62       	ori	r24, 0x20	; 32
    1606:	80 83       	st	Z, r24
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <USB_Device_ProcessControlRequest+0x126>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    160a:	eb ee       	ldi	r30, 0xEB	; 235
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	80 61       	ori	r24, 0x10	; 16
    1612:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <USB_Device_ProcessControlRequest+0x114>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	2a 95       	dec	r18
    1620:	e2 f7       	brpl	.-8      	; 0x161a <USB_Device_ProcessControlRequest+0x110>
    1622:	aa ee       	ldi	r26, 0xEA	; 234
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	8c 93       	st	X, r24
				UERST = 0;
    1628:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    162a:	80 81       	ld	r24, Z
    162c:	88 60       	ori	r24, 0x08	; 8
    162e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1630:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1634:	e8 ee       	ldi	r30, 0xE8	; 232
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	87 7f       	andi	r24, 0xF7	; 247
    163c:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    163e:	e3 dd       	rcall	.-1082   	; 0x1206 <Endpoint_ClearStatusStage>
    1640:	ae c0       	rjmp	.+348    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1642:	91 11       	cpse	r25, r1
    1644:	ac c0       	rjmp	.+344    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1646:	10 91 25 02 	lds	r17, 0x0225
    164a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    164c:	e3 ee       	ldi	r30, 0xE3	; 227
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 78       	andi	r24, 0x80	; 128
    1654:	81 2b       	or	r24, r17
    1656:	80 83       	st	Z, r24
    1658:	e8 ee       	ldi	r30, 0xE8	; 232
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	87 7f       	andi	r24, 0xF7	; 247
    1660:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1662:	d1 dd       	rcall	.-1118   	; 0x1206 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1664:	e8 ee       	ldi	r30, 0xE8	; 232
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    166a:	80 ff       	sbrs	r24, 0
    166c:	fd cf       	rjmp	.-6      	; 0x1668 <USB_Device_ProcessControlRequest+0x15e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    166e:	e3 ee       	ldi	r30, 0xE3	; 227
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 68       	ori	r24, 0x80	; 128
    1676:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1678:	11 23       	and	r17, r17
    167a:	11 f0       	breq	.+4      	; 0x1680 <USB_Device_ProcessControlRequest+0x176>
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <USB_Device_ProcessControlRequest+0x178>
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	80 93 22 02 	sts	0x0222, r24
    1686:	8b c0       	rjmp	.+278    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1688:	90 58       	subi	r25, 0x80	; 128
    168a:	92 30       	cpi	r25, 0x02	; 2
    168c:	08 f0       	brcs	.+2      	; 0x1690 <USB_Device_ProcessControlRequest+0x186>
    168e:	87 c0       	rjmp	.+270    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1690:	80 91 25 02 	lds	r24, 0x0225
    1694:	90 91 26 02 	lds	r25, 0x0226
    1698:	8c 3d       	cpi	r24, 0xDC	; 220
    169a:	23 e0       	ldi	r18, 0x03	; 3
    169c:	92 07       	cpc	r25, r18
    169e:	99 f5       	brne	.+102    	; 0x1706 <USB_Device_ProcessControlRequest+0x1fc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    16a4:	8a e2       	ldi	r24, 0x2A	; 42
    16a6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16a8:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16aa:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    16ac:	de 01       	movw	r26, r28
    16ae:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16b0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    16b2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    16b4:	41 e2       	ldi	r20, 0x21	; 33
    16b6:	e3 2f       	mov	r30, r19
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	40 93 57 00 	sts	0x0057, r20
    16be:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    16c0:	20 ff       	sbrs	r18, 0
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <USB_Device_ProcessControlRequest+0x1c0>
					{
						SerialByte >>= 4;
    16c4:	82 95       	swap	r24
    16c6:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    16c8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    16ca:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    16cc:	8a 30       	cpi	r24, 0x0A	; 10
    16ce:	18 f0       	brcs	.+6      	; 0x16d6 <USB_Device_ProcessControlRequest+0x1cc>
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	c7 96       	adiw	r24, 0x37	; 55
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <USB_Device_ProcessControlRequest+0x1d0>
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	c0 96       	adiw	r24, 0x30	; 48
    16da:	8d 93       	st	X+, r24
    16dc:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16de:	2f 5f       	subi	r18, 0xFF	; 255
    16e0:	24 31       	cpi	r18, 0x14	; 20
    16e2:	49 f7       	brne	.-46     	; 0x16b6 <USB_Device_ProcessControlRequest+0x1ac>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    16e4:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16e6:	08 ee       	ldi	r16, 0xE8	; 232
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	f8 01       	movw	r30, r16
    16ec:	80 81       	ld	r24, Z
    16ee:	87 7f       	andi	r24, 0xF7	; 247
    16f0:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    16f2:	6a e2       	ldi	r22, 0x2A	; 42
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	ce 01       	movw	r24, r28
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	3c db       	rcall	.-2440   	; 0xd74 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16fc:	f8 01       	movw	r30, r16
    16fe:	80 81       	ld	r24, Z
    1700:	8b 77       	andi	r24, 0x7B	; 123
    1702:	80 83       	st	Z, r24
    1704:	4c c0       	rjmp	.+152    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1706:	ae 01       	movw	r20, r28
    1708:	4f 5f       	subi	r20, 0xFF	; 255
    170a:	5f 4f       	sbci	r21, 0xFF	; 255
    170c:	60 91 27 02 	lds	r22, 0x0227
    1710:	0e 94 cc 01 	call	0x398	; 0x398 <CALLBACK_USB_GetDescriptor>
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	09 f4       	brne	.+2      	; 0x171a <USB_Device_ProcessControlRequest+0x210>
    1718:	42 c0       	rjmp	.+132    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    171a:	08 ee       	ldi	r16, 0xE8	; 232
    171c:	10 e0       	ldi	r17, 0x00	; 0
    171e:	f8 01       	movw	r30, r16
    1720:	20 81       	ld	r18, Z
    1722:	27 7f       	andi	r18, 0xF7	; 247
    1724:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1726:	bc 01       	movw	r22, r24
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	26 dc       	rcall	.-1972   	; 0xf7a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    172e:	f8 01       	movw	r30, r16
    1730:	80 81       	ld	r24, Z
    1732:	8b 77       	andi	r24, 0x7B	; 123
    1734:	80 83       	st	Z, r24
    1736:	33 c0       	rjmp	.+102    	; 0x179e <USB_Device_ProcessControlRequest+0x294>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1738:	90 38       	cpi	r25, 0x80	; 128
    173a:	89 f5       	brne	.+98     	; 0x179e <USB_Device_ProcessControlRequest+0x294>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    173c:	e8 ee       	ldi	r30, 0xE8	; 232
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	87 7f       	andi	r24, 0xF7	; 247
    1744:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1746:	80 91 1e 02 	lds	r24, 0x021E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    174a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    174e:	80 81       	ld	r24, Z
    1750:	8e 77       	andi	r24, 0x7E	; 126
    1752:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1754:	58 dd       	rcall	.-1360   	; 0x1206 <Endpoint_ClearStatusStage>
    1756:	23 c0       	rjmp	.+70     	; 0x179e <USB_Device_ProcessControlRequest+0x294>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1758:	91 11       	cpse	r25, r1
    175a:	21 c0       	rjmp	.+66     	; 0x179e <USB_Device_ProcessControlRequest+0x294>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    175c:	80 91 25 02 	lds	r24, 0x0225
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	e8 f4       	brcc	.+58     	; 0x179e <USB_Device_ProcessControlRequest+0x294>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1764:	e8 ee       	ldi	r30, 0xE8	; 232
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	87 7f       	andi	r24, 0xF7	; 247
    176c:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    176e:	80 91 25 02 	lds	r24, 0x0225
    1772:	80 93 1e 02 	sts	0x021E, r24

	Endpoint_ClearStatusStage();
    1776:	47 dd       	rcall	.-1394   	; 0x1206 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1778:	80 91 1e 02 	lds	r24, 0x021E
    177c:	88 23       	and	r24, r24
    177e:	21 f0       	breq	.+8      	; 0x1788 <USB_Device_ProcessControlRequest+0x27e>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	80 93 22 02 	sts	0x0222, r24
    1786:	09 c0       	rjmp	.+18     	; 0x179a <USB_Device_ProcessControlRequest+0x290>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1788:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    178c:	88 23       	and	r24, r24
    178e:	14 f4       	brge	.+4      	; 0x1794 <USB_Device_ProcessControlRequest+0x28a>
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <USB_Device_ProcessControlRequest+0x28c>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	80 93 22 02 	sts	0x0222, r24

	EVENT_USB_Device_ConfigurationChanged();
    179a:	0e 94 8d 02 	call	0x51a	; 0x51a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    179e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    17a2:	83 ff       	sbrs	r24, 3
    17a4:	16 c0       	rjmp	.+44     	; 0x17d2 <USB_Device_ProcessControlRequest+0x2c8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17a6:	e8 ee       	ldi	r30, 0xE8	; 232
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	87 7f       	andi	r24, 0xF7	; 247
    17ae:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17b0:	eb ee       	ldi	r30, 0xEB	; 235
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 62       	ori	r24, 0x20	; 32
    17b8:	80 83       	st	Z, r24
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <USB_Device_ProcessControlRequest+0x2c8>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    17bc:	90 91 25 02 	lds	r25, 0x0225
    17c0:	91 30       	cpi	r25, 0x01	; 1
    17c2:	69 f7       	brne	.-38     	; 0x179e <USB_Device_ProcessControlRequest+0x294>
    17c4:	06 cf       	rjmp	.-500    	; 0x15d2 <USB_Device_ProcessControlRequest+0xc8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    17c6:	80 91 25 02 	lds	r24, 0x0225
    17ca:	88 23       	and	r24, r24
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <USB_Device_ProcessControlRequest+0x2c6>
    17ce:	08 cf       	rjmp	.-496    	; 0x15e0 <USB_Device_ProcessControlRequest+0xd6>
    17d0:	2f cf       	rjmp	.-418    	; 0x1630 <USB_Device_ProcessControlRequest+0x126>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    17d2:	aa 96       	adiw	r28, 0x2a	; 42
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    17e8:	08 95       	ret

000017ea <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17ea:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    17ec:	80 91 22 02 	lds	r24, 0x0222
    17f0:	88 23       	and	r24, r24
    17f2:	a1 f0       	breq	.+40     	; 0x181c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17f4:	c0 91 e9 00 	lds	r28, 0x00E9
    17f8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17fa:	80 91 ec 00 	lds	r24, 0x00EC
    17fe:	80 ff       	sbrs	r24, 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <USB_USBTask+0x1c>
    1802:	80 e8       	ldi	r24, 0x80	; 128
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <USB_USBTask+0x1e>
    1806:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1808:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    180a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    180e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1812:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1814:	7a de       	rcall	.-780    	; 0x150a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1816:	cf 70       	andi	r28, 0x0F	; 15
    1818:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <__divmodhi4>:
    1820:	97 fb       	bst	r25, 7
    1822:	07 2e       	mov	r0, r23
    1824:	16 f4       	brtc	.+4      	; 0x182a <__divmodhi4+0xa>
    1826:	00 94       	com	r0
    1828:	06 d0       	rcall	.+12     	; 0x1836 <__divmodhi4_neg1>
    182a:	77 fd       	sbrc	r23, 7
    182c:	08 d0       	rcall	.+16     	; 0x183e <__divmodhi4_neg2>
    182e:	1f d0       	rcall	.+62     	; 0x186e <__udivmodhi4>
    1830:	07 fc       	sbrc	r0, 7
    1832:	05 d0       	rcall	.+10     	; 0x183e <__divmodhi4_neg2>
    1834:	3e f4       	brtc	.+14     	; 0x1844 <__divmodhi4_exit>

00001836 <__divmodhi4_neg1>:
    1836:	90 95       	com	r25
    1838:	81 95       	neg	r24
    183a:	9f 4f       	sbci	r25, 0xFF	; 255
    183c:	08 95       	ret

0000183e <__divmodhi4_neg2>:
    183e:	70 95       	com	r23
    1840:	61 95       	neg	r22
    1842:	7f 4f       	sbci	r23, 0xFF	; 255

00001844 <__divmodhi4_exit>:
    1844:	08 95       	ret

00001846 <__clzdi2>:
    1846:	27 d0       	rcall	.+78     	; 0x1896 <__clzsi2>
    1848:	85 ff       	sbrs	r24, 5
    184a:	08 95       	ret
    184c:	b9 01       	movw	r22, r18
    184e:	ca 01       	movw	r24, r20
    1850:	22 d0       	rcall	.+68     	; 0x1896 <__clzsi2>
    1852:	80 5e       	subi	r24, 0xE0	; 224
    1854:	08 95       	ret

00001856 <__cmpdi2_s8>:
    1856:	00 24       	eor	r0, r0
    1858:	a7 fd       	sbrc	r26, 7
    185a:	00 94       	com	r0
    185c:	2a 17       	cp	r18, r26
    185e:	30 05       	cpc	r19, r0
    1860:	40 05       	cpc	r20, r0
    1862:	50 05       	cpc	r21, r0
    1864:	60 05       	cpc	r22, r0
    1866:	70 05       	cpc	r23, r0
    1868:	80 05       	cpc	r24, r0
    186a:	90 05       	cpc	r25, r0
    186c:	08 95       	ret

0000186e <__udivmodhi4>:
    186e:	aa 1b       	sub	r26, r26
    1870:	bb 1b       	sub	r27, r27
    1872:	51 e1       	ldi	r21, 0x11	; 17
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <__udivmodhi4_ep>

00001876 <__udivmodhi4_loop>:
    1876:	aa 1f       	adc	r26, r26
    1878:	bb 1f       	adc	r27, r27
    187a:	a6 17       	cp	r26, r22
    187c:	b7 07       	cpc	r27, r23
    187e:	10 f0       	brcs	.+4      	; 0x1884 <__udivmodhi4_ep>
    1880:	a6 1b       	sub	r26, r22
    1882:	b7 0b       	sbc	r27, r23

00001884 <__udivmodhi4_ep>:
    1884:	88 1f       	adc	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	5a 95       	dec	r21
    188a:	a9 f7       	brne	.-22     	; 0x1876 <__udivmodhi4_loop>
    188c:	80 95       	com	r24
    188e:	90 95       	com	r25
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	08 95       	ret

00001896 <__clzsi2>:
    1896:	06 d0       	rcall	.+12     	; 0x18a4 <__clzhi2>
    1898:	84 ff       	sbrs	r24, 4
    189a:	08 95       	ret
    189c:	cb 01       	movw	r24, r22
    189e:	02 d0       	rcall	.+4      	; 0x18a4 <__clzhi2>
    18a0:	80 5f       	subi	r24, 0xF0	; 240
    18a2:	08 95       	ret

000018a4 <__clzhi2>:
    18a4:	aa 27       	eor	r26, r26
    18a6:	99 23       	and	r25, r25
    18a8:	29 f4       	brne	.+10     	; 0x18b4 <__clzhi2+0x10>
    18aa:	a8 5f       	subi	r26, 0xF8	; 248
    18ac:	98 2b       	or	r25, r24
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <__clzhi2+0x10>
    18b0:	80 e1       	ldi	r24, 0x10	; 16
    18b2:	08 95       	ret
    18b4:	90 31       	cpi	r25, 0x10	; 16
    18b6:	18 f4       	brcc	.+6      	; 0x18be <__clzhi2+0x1a>
    18b8:	ad 5f       	subi	r26, 0xFD	; 253
    18ba:	92 95       	swap	r25
    18bc:	a3 95       	inc	r26
    18be:	99 0f       	add	r25, r25
    18c0:	e8 f7       	brcc	.-6      	; 0x18bc <__clzhi2+0x18>
    18c2:	8a 2f       	mov	r24, r26
    18c4:	99 27       	eor	r25, r25
    18c6:	08 95       	ret

000018c8 <toupper>:
    18c8:	91 11       	cpse	r25, r1
    18ca:	08 95       	ret
    18cc:	81 56       	subi	r24, 0x61	; 97
    18ce:	8a 51       	subi	r24, 0x1A	; 26
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <toupper+0xc>
    18d2:	80 52       	subi	r24, 0x20	; 32
    18d4:	85 58       	subi	r24, 0x85	; 133
    18d6:	08 95       	ret

000018d8 <memcmp>:
    18d8:	fb 01       	movw	r30, r22
    18da:	dc 01       	movw	r26, r24
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <memcmp+0xe>
    18de:	8d 91       	ld	r24, X+
    18e0:	01 90       	ld	r0, Z+
    18e2:	80 19       	sub	r24, r0
    18e4:	21 f4       	brne	.+8      	; 0x18ee <memcmp+0x16>
    18e6:	41 50       	subi	r20, 0x01	; 1
    18e8:	50 40       	sbci	r21, 0x00	; 0
    18ea:	c8 f7       	brcc	.-14     	; 0x18de <memcmp+0x6>
    18ec:	88 1b       	sub	r24, r24
    18ee:	99 0b       	sbc	r25, r25
    18f0:	08 95       	ret

000018f2 <memcpy>:
    18f2:	fb 01       	movw	r30, r22
    18f4:	dc 01       	movw	r26, r24
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <memcpy+0xa>
    18f8:	01 90       	ld	r0, Z+
    18fa:	0d 92       	st	X+, r0
    18fc:	41 50       	subi	r20, 0x01	; 1
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	d8 f7       	brcc	.-10     	; 0x18f8 <memcpy+0x6>
    1902:	08 95       	ret

00001904 <memset>:
    1904:	dc 01       	movw	r26, r24
    1906:	01 c0       	rjmp	.+2      	; 0x190a <memset+0x6>
    1908:	6d 93       	st	X+, r22
    190a:	41 50       	subi	r20, 0x01	; 1
    190c:	50 40       	sbci	r21, 0x00	; 0
    190e:	e0 f7       	brcc	.-8      	; 0x1908 <memset+0x4>
    1910:	08 95       	ret

00001912 <_exit>:
    1912:	f8 94       	cli

00001914 <__stop_program>:
    1914:	ff cf       	rjmp	.-2      	; 0x1914 <__stop_program>
